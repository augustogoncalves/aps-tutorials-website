"use strict";(self.webpackChunkaps_tutorials_website=self.webpackChunkaps_tutorials_website||[]).push([[104],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),c=d(n),h=i,g=c["".concat(l,".").concat(h)]||c[h]||p[h]||o;return n?a.createElement(g,s(s({ref:t},u),{},{components:n})):a.createElement(g,s({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=c;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:i,s[1]=r;for(var d=2;d<o;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8293:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var a=n(7462),i=(n(7294),n(4137));const o={},s="Grade de Dados",r={unversionedId:"tutorials/dashboard/grid",id:"tutorials/dashboard/grid",title:"Grade de Dados",description:"Nesta etapa final, criaremos uma extens\xe3o de visualizador que fornecer\xe1 uma exibi\xe7\xe3o de grade de dados",source:"@site/i18n/pt/docusaurus-plugin-content-docs/current/03-tutorials/03-dashboard/04-grid.mdx",sourceDirName:"03-tutorials/03-dashboard",slug:"/tutorials/dashboard/grid",permalink:"/pt/tutorials/dashboard/grid",draft:!1,editUrl:"https://github.com/autodesk-platform-services/aps-tutorials-website/edit/master/docs/03-tutorials/03-dashboard/04-grid.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Gr\xe1ficos de Histograma",permalink:"/pt/tutorials/dashboard/charts"},next:{title:"Automa\xe7\xe3o de Projetos",permalink:"/pt/tutorials/design-automation/"}},l={},d=[{value:"Esqueleto de extens\xe3o",id:"esqueleto-de-extens\xe3o",level:2},{value:"Barra de ferramentas",id:"barra-de-ferramentas",level:2},{value:"Grade de dados",id:"grade-de-dados-1",level:2},{value:"Experimente",id:"experimente",level:2}],u={toc:d};function p(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"grade-de-dados"},"Grade de Dados"),(0,i.kt)("p",null,"Nesta etapa final, criaremos uma extens\xe3o de visualizador que fornecer\xe1 uma exibi\xe7\xe3o de grade de dados\nde nossas propriedades de elemento de design usando a biblioteca de c\xf3digo aberto ",(0,i.kt)("a",{parentName:"p",href:"http://tabulator.info"},"Tabulator"),"."),(0,i.kt)("h2",{id:"esqueleto-de-extens\xe3o"},"Esqueleto de extens\xe3o"),(0,i.kt)("p",null,"Como de costume, vamos criar um novo arquivo na subpasta 'extens\xf5es', cham\xe1-lo de 'DataGridExtension.js',\ne preencha-o com o seguinte c\xf3digo:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/extensions/DataGridExtension.js"',title:'"wwwroot/extensions/DataGridExtension.js"'},"import { BaseExtension } from './BaseExtension.js';\nclass DataGridExtension extends BaseExtension {\n    constructor(viewer, options) {\n        super(viewer, options);\n    }\n    async load() {\n        super.load();\n        await Promise.all([\n            this.loadScript('https://unpkg.com/tabulator-tables@4.9.3/dist/js/tabulator.min.js', 'Tabulator'),\n            this.loadStylesheet('https://unpkg.com/tabulator-tables@4.9.3/dist/css/tabulator.min.css')\n        ]);\n        console.log('DataGridExtension loaded.');\n        return true;\n    }\n    unload() {\n        super.unload();\n        console.log('DataGridExtension unloaded.');\n        return true;\n    }\n}\nAutodesk.Viewing.theExtensionManager.registerExtension('DataGridExtension', DataGridExtension);\n")),(0,i.kt)("p",null,"Desta vez, tamb\xe9m estamos carregando v\xe1rias depend\xeancias que s\xe3o exigidas pela biblioteca do Tabulator."),(0,i.kt)("p",null,"Now let's import the JavaScript file to our application, and pass the extension ID to the viewer\nconstructor:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import './extensions/LoggerExtension.js';\nimport './extensions/SummaryExtension.js';\nimport './extensions/HistogramExtension.js';\n// highlight-start\nimport './extensions/DataGridExtension.js';\n// highlight-end\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const config = {\n    extensions: [\n        'LoggerExtension',\n        'SummaryExtension',\n        'HistogramExtension',\n        // highlight-start\n        'DataGridExtension',\n        // highlight-end\n    ]\n};\nconst viewer = new Autodesk.Viewing.GuiViewer3D(container, config);\n")),(0,i.kt)("h2",{id:"barra-de-ferramentas"},"Barra de ferramentas"),(0,i.kt)("p",null,"Em seguida, vamos atualizar a classe 'DataGridExtension' para que ela adicione um novo bot\xe3o ao visualizador\nbarra de ferramentas quando a extens\xe3o \xe9 carregada:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/extensions/DataGridExtension.js"',title:'"wwwroot/extensions/DataGridExtension.js"'},"import { BaseExtension } from './BaseExtension.js';\nclass DataGridExtension extends BaseExtension {\n    constructor(viewer, options) {\n        super(viewer, options);\n        // highlight-start\n        this._button = null;\n        // highlight-end\n    }\n    async load() {\n        super.load();\n        await Promise.all([\n            this.loadScript('https://unpkg.com/tabulator-tables@4.9.3/dist/js/tabulator.min.js', 'Tabulator'),\n            this.loadStylesheet('https://unpkg.com/tabulator-tables@4.9.3/dist/css/tabulator.min.css')\n        ]);\n        console.log('DataGridExtension loaded.');\n        return true;\n    }\n    unload() {\n        super.unload();\n        // highlight-start\n        if (this._button) {\n            this.removeToolbarButton(this._button);\n            this._button = null;\n        }\n        // highlight-end\n        console.log('DataGridExtension unloaded.');\n        return true;\n    }\n    // highlight-start\n    onToolbarCreated() {\n        this._button = this.createToolbarButton('dashboard-datagrid-button', 'https://img.icons8.com/small/32/activity-grid.png', 'Show Data Grid');\n        this._button.onClick = () => {\n            // TODO\n        };\n    }\n    // highlight-end\n}\nAutodesk.Viewing.theExtensionManager.registerExtension('DataGridExtension', DataGridExtension);\n")),(0,i.kt)("h2",{id:"grade-de-dados-1"},"Grade de dados"),(0,i.kt)("p",null,"Agora vamos criar um painel de encaixe personalizado que hospedar\xe1 a grade real do Tabulador. Criar\num arquivo 'DataGridPanel.js' na mesma pasta onde 'DataGridExtension.js' est\xe1 localizado, e\nAdicione o seguinte c\xf3digo a ele:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/extensions/DataGridPanel.js"',title:'"wwwroot/extensions/DataGridPanel.js"'},"const DATAGRID_CONFIG = {\n    requiredProps: ['name', 'Volume', 'Level'], // Which properties should be requested for each object\n    columns: [ // Definition of individual grid columns (see http://tabulator.info for more details)\n        { title: 'ID', field: 'dbid' },\n        { title: 'Name', field: 'name', width: 150 },\n        { title: 'Volume', field: 'volume', hozAlign: 'left', formatter: 'progress' },\n        { title: 'Level', field: 'level' }\n    ],\n    groupBy: 'level', // Optional column to group by\n    createRow: (dbid, name, props) => { // Function generating grid rows based on recieved object properties\n        const volume = props.find(p => p.displayName === 'Volume')?.displayValue;\n        const level = props.find(p => p.displayName === 'Level' && p.displayCategory === 'Constraints')?.displayValue;\n        return { dbid, name, volume, level };\n    },\n    onRowClick: (row, viewer) => {\n        viewer.isolate([row.dbid]);\n        viewer.fitToView([row.dbid]);\n    }\n};\nexport class DataGridPanel extends Autodesk.Viewing.UI.DockingPanel {\n    constructor(extension, id, title, options) {\n        super(extension.viewer.container, id, title, options);\n        this.extension = extension;\n        this.container.style.left = (options.x || 0) + 'px';\n        this.container.style.top = (options.y || 0) + 'px';\n        this.container.style.width = (options.width || 500) + 'px';\n        this.container.style.height = (options.height || 400) + 'px';\n        this.container.style.resize = 'none';\n    }\n    initialize() {\n        this.title = this.createTitleBar(this.titleLabel || this.container.id);\n        this.initializeMoveHandlers(this.title);\n        this.container.appendChild(this.title);\n        this.content = document.createElement('div');\n        this.content.style.height = '350px';\n        this.content.style.backgroundColor = 'white';\n        this.content.innerHTML = `<div class=\"datagrid-container\" style=\"position: relative; height: 350px;\"></div>`;\n        this.container.appendChild(this.content);\n        // See http://tabulator.info\n        this.table = new Tabulator('.datagrid-container', {\n            height: '100%',\n            layout: 'fitColumns',\n            columns: DATAGRID_CONFIG.columns,\n            groupBy: DATAGRID_CONFIG.groupBy,\n            rowClick: (e, row) => DATAGRID_CONFIG.onRowClick(row.getData(), this.extension.viewer)\n        });\n    }\n    update(model, dbids) {\n        model.getBulkProperties(dbids, { propFilter: DATAGRID_CONFIG.requiredProps }, (results) => {\n            this.table.replaceData(results.map((result) => DATAGRID_CONFIG.createRow(result.dbId, result.name, result.properties)));\n        }, (err) => {\n            console.error(err);\n        });\n    }\n}\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Para manter as coisas simples, a classe 'DataGridPanel' est\xe1 atualmente codificando as colunas de grade\npara mostrar apenas algumas propriedades espec\xedficas de nossos metadados de design (especificamente o ID do objeto,\nnome do objeto e propriedades 'Volume' e 'Level'). Dependendo do tipo de design que voc\xea ser\xe1\ncarregando em seu aplicativo, voc\xea pode querer alter\xe1-los.")),(0,i.kt)("p",null,"Por fim, adicione o novo painel \xe0 nossa extens\xe3o:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/extensions/DataGridExtension.js"',title:'"wwwroot/extensions/DataGridExtension.js"'},"import { BaseExtension } from './BaseExtension.js';\n// highlight-start\nimport { DataGridPanel } from './DataGridPanel.js';\n// highlight-end\nclass DataGridExtension extends BaseExtension {\n    constructor(viewer, options) {\n        super(viewer, options);\n        this._button = null;\n        // highlight-start\n        this._panel = null;\n        // highlight-end\n    }\n    async load() {\n        super.load();\n        await Promise.all([\n            this.loadScript('https://unpkg.com/tabulator-tables@4.9.3/dist/js/tabulator.min.js', 'Tabulator'),\n            this.loadStylesheet('https://unpkg.com/tabulator-tables@4.9.3/dist/css/tabulator.min.css')\n        ]);\n        console.log('DataGridExtension loaded.');\n        return true;\n    }\n    unload() {\n        super.unload();\n        if (this._button) {\n            this.removeToolbarButton(this._button);\n            this._button = null;\n        }\n        // highlight-start\n        if (this._panel) {\n            this._panel.setVisible(false);\n            this._panel.uninitialize();\n            this._panel = null;\n        }\n        // highlight-end\n        console.log('DataGridExtension unloaded.');\n        return true;\n    }\n    onToolbarCreated() {\n        // highlight-start\n        this._panel = new DataGridPanel(this, 'dashboard-datagrid-panel', 'Data Grid', { x: 10, y: 10 });\n        // highlight-end\n        this._button = this.createToolbarButton('dashboard-datagrid-button', 'https://img.icons8.com/small/32/activity-grid.png', 'Show Data Grid');\n        this._button.onClick = () => {\n            // highlight-start\n            this._panel.setVisible(!this._panel.isVisible());\n            this._button.setState(this._panel.isVisible() ? Autodesk.Viewing.UI.Button.State.ACTIVE : Autodesk.Viewing.UI.Button.State.INACTIVE);\n            if (this._panel.isVisible() && this.viewer.model) {\n                this.update();\n            }\n            // highlight-end\n        };\n    }\n    // highlight-start\n    onModelLoaded(model) {\n        super.onModelLoaded(model);\n        if (this._panel && this._panel.isVisible()) {\n            this.update();\n        }\n    }\n    // highlight-end\n    // highlight-start\n    async update() {\n        const dbids = await this.findLeafNodes(this.viewer.model);\n        this._panel.update(this.viewer.model, dbids);\n    }\n    // highlight-end\n}\nAutodesk.Viewing.theExtensionManager.registerExtension('DataGridExtension', DataGridExtension);\n")),(0,i.kt)("h2",{id:"experimente"},"Experimente"),(0,i.kt)("p",null,"Clique no novo bot\xe3o da barra de ferramentas para abrir o painel datagrid. A grade deve listar selecionados\npropriedades de todos os elementos de design e clicar em qualquer linha na grade deve isolar o espec\xedfico\nelemento de design no visualizador."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Grid Result",src:n(1462).Z,width:"3501",height:"1924"})))}p.isMDXComponent=!0},1462:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/data-grid-final-app-2fb289315f27e7410dea94d08f7db752.webp"}}]);