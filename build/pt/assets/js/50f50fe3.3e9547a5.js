"use strict";(self.webpackChunkaps_tutorials_website=self.webpackChunkaps_tutorials_website||[]).push([[658],{425:(e,t,n)=>{n.d(t,{Z:()=>r});var i=n(7294),a=n(6010);const s="tabItem_Ymn6";function r(e){let{children:t,hidden:n,className:r}=e;return i.createElement("div",{role:"tabpanel",className:(0,a.Z)(s,r),hidden:n},t)}},3992:(e,t,n)=>{n.d(t,{Z:()=>w});var i=n(7462),a=n(7294),s=n(6010),r=n(2957),o=n(6550),l=n(5238),u=n(3609),c=n(2560);function d(e){return function(e){return a.Children.map(e,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:i,default:a}}=e;return{value:t,label:n,attributes:i,default:a}}))}function p(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function v(e){let{queryString:t=!1,groupId:n}=e;const i=(0,o.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(s),(0,a.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(i.location.search);t.set(s,e),i.replace({...i.location,search:t.toString()})}),[s,i])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:i}=e,s=p(e),[r,o]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const i=n.find((e=>e.default))??n[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:t,tabValues:s}))),[l,u]=v({queryString:n,groupId:i}),[d,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[i,s]=(0,c.Nk)(n);return[i,(0,a.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:i}),g=(()=>{const e=l??d;return m({value:e,tabValues:s})?e:null})();(0,a.useLayoutEffect)((()=>{g&&o(g)}),[g]);return{selectedValue:r,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),f(e)}),[u,f,s]),tabValues:s}}var g=n(1048);const y="tabList__CuJ",b="tabItem_LNqP";function A(e){let{className:t,block:n,selectedValue:o,selectValue:l,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,r.o5)(),p=e=>{const t=e.currentTarget,n=c.indexOf(t),i=u[n].value;i!==o&&(d(t),l(i))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:r}=e;return a.createElement("li",(0,i.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:p},r,{className:(0,s.Z)("tabs__item",b,r?.className,{"tabs__item--active":o===t})}),n??t)})))}function h(e){let{lazy:t,children:n,selectedValue:i}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==i}))))}function N(e){const t=f(e);return a.createElement("div",{className:(0,s.Z)("tabs-container",y)},a.createElement(A,(0,i.Z)({},e,t)),a.createElement(h,(0,i.Z)({},e,t)))}function w(e){const t=(0,g.Z)();return a.createElement(N,(0,i.Z)({key:String(t)},e))}},415:(e,t,n)=>{n.d(t,{Z:()=>r});var i=n(7294),a=n(3992),s=n(425);function r(e){let{NodeJsVsCode:t,DotNetVsCode:n,DotNetVs2022:r}=e;return i.createElement(a.Z,{groupId:"development-environment"},i.createElement(s.Z,{value:"nodejs-vscode",label:"Node.js & VSCode",default:!0},i.createElement(t,null)),i.createElement(s.Z,{value:"dotnet-vscode",label:".NET 6 & VSCode"},i.createElement(n,null)),i.createElement(s.Z,{value:"dotnet-vs2022",label:".NET 6 & VS2022"},i.createElement(r,null)))}},3913:(e,t,n)=>{n.d(t,{Z:()=>o});var i=n(7294),a=n(2004);const s="wrapper_emgM",r="player_m1gG";function o(e){let{src:t}=e;return i.createElement("div",{className:s},i.createElement(a.Z,{className:r,url:t,playing:!0,loop:!0,width:"100%",height:"100%"}))}},4162:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>m,default:()=>b,frontMatter:()=>p,metadata:()=>v,toc:()=>g});var i=n(7462),a=(n(7294),n(4137)),s=n(3913);const r=n.p+"assets/medias/define-activity-f57d18783180be635e9a68642214f7bf.mp4",o={toc:[]};function l(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Os seguintes m\xe9todos devem ser adicionados \xe0 classe 'DesignAutomationController'."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"EngineAttributes")),(0,a.kt)("p",null,"Para definir a atividade, precisaremos do execut\xe1vel e da extens\xe3o de arquivo padr\xe3o. Esta fun\xe7\xe3o auxiliar fornece-lo (a partir do nome do mecanismo)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'/// <summary>\n/// Helps identify the engine\n/// </summary>\nprivate dynamic EngineAttributes(string engine)\n{\n    if (engine.Contains("3dsMax")) return new { commandLine = "$(engine.path)\\\\3dsmaxbatch.exe -sceneFile \\"$(args[inputFile].path)\\" $(settings[script].path)", extension = "max", script = "da = dotNetClass(\\"Autodesk.Forge.Sample.DesignAutomation.Max.RuntimeExecute\\")\\nda.ModifyWindowWidthHeight()\\n" };\n    if (engine.Contains("AutoCAD")) return new { commandLine = "$(engine.path)\\\\accoreconsole.exe /i \\"$(args[inputFile].path)\\" /al \\"$(appbundles[{0}].path)\\" /s $(settings[script].path)", extension = "dwg", script = "UpdateParam\\n" };\n    if (engine.Contains("Inventor")) return new { commandLine = "$(engine.path)\\\\inventorcoreconsole.exe /i \\"$(args[inputFile].path)\\" /al \\"$(appbundles[{0}].path)\\"", extension = "ipt", script = string.Empty };\n    if (engine.Contains("Revit")) return new { commandLine = "$(engine.path)\\\\revitcoreconsole.exe /i \\"$(args[inputFile].path)\\" /al \\"$(appbundles[{0}].path)\\"", extension = "rvt", script = string.Empty };\n    throw new Exception("Invalid engine");\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"CreateActivity")),(0,a.kt)("p",null,"Defina uma nova atividade com um arquivo de entrada, dados de entrada (JSON) e um arquivo de sa\xedda."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'/// <summary>\n/// Define a new activity\n/// </summary>\n[HttpPost]\n[Route("api/aps/designautomation/activities")]\npublic async Task<IActionResult> CreateActivity([FromBody]JObject activitySpecs)\n{\n    // basic input validation\n    string zipFileName = activitySpecs["zipFileName"].Value<string>();\n    string engineName = activitySpecs["engine"].Value<string>();\n    // standard name for this sample\n    string appBundleName = zipFileName + "AppBundle";\n    string activityName = zipFileName + "Activity";\n    //\n    Page<string> activities = await _designAutomation.GetActivitiesAsync();\n    string qualifiedActivityId = string.Format("{0}.{1}+{2}", NickName, activityName, Alias);\n    if (!activities.Data.Contains(qualifiedActivityId))\n    {\n        // define the activity\n        // ToDo: parametrize for different engines...\n        dynamic engineAttributes = EngineAttributes(engineName);\n        string commandLine = string.Format(engineAttributes.commandLine, appBundleName);\n        Activity activitySpec = new Activity()\n        {\n            Id = activityName,\n            Appbundles = new List<string>() { string.Format("{0}.{1}+{2}", NickName, appBundleName, Alias) },\n            CommandLine = new List<string>() { commandLine },\n            Engine = engineName,\n            Parameters = new Dictionary<string, Parameter>()\n            {\n                { "inputFile", new Parameter() { Description = "input file", LocalName = "$(inputFile)", Ondemand = false, Required = true, Verb = Verb.Get, Zip = false } },\n                { "inputJson", new Parameter() { Description = "input json", LocalName = "params.json", Ondemand = false, Required = false, Verb = Verb.Get, Zip = false } },\n                { "outputFile", new Parameter() { Description = "output file", LocalName = "outputFile." + engineAttributes.extension, Ondemand = false, Required = true, Verb = Verb.Put, Zip = false } }\n            },\n            Settings = new Dictionary<string, ISetting>()\n            {\n                { "script", new StringSetting(){ Value = engineAttributes.script } }\n            }\n        };\n        Activity newActivity = await _designAutomation.CreateActivityAsync(activitySpec);\n        // specify the alias for this Activity\n        Alias aliasSpec = new Alias() { Id = Alias, Version = 1 };\n        Alias newAlias = await _designAutomation.CreateActivityAliasAsync(activityName, aliasSpec);\n        return Ok(new { Activity = qualifiedActivityId });\n    }\n    // as this activity points to a AppBundle "dev" alias (which points to the last version of the bundle),\n    // there is no need to update it (for this sample), but this may be extended for different contexts\n    return Ok(new { Activity = "Activity already defined" });\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"GetDefinedActivities")),(0,a.kt)("p",null,"Tamb\xe9m precisaremos de um m\xe9todo para retornar todas as atividades definidas. Observe que retorna apenas aqueles definidos por voc\xea (usamos o ID do Cliente APS como apelido, que aparece como um prefixo)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'/// <summary>\n/// Get all Activities defined for this account\n/// </summary>\n[HttpGet]\n[Route("api/aps/designautomation/activities")]\npublic async Task<List<string>> GetDefinedActivities()\n{\n    // filter list of\n    Page<string> activities = await _designAutomation.GetActivitiesAsync();\n    List<string> definedActivities = new List<string>();\n    foreach (string activity in activities.Data)\n        if (activity.StartsWith(NickName) && activity.IndexOf("$LATEST") == -1)\n            definedActivities.Add(activity.Replace(NickName + ".", String.Empty));\n    return definedActivities;\n}\n')))}l.isMDXComponent=!0;const u={toc:[]};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"-Atividade"),(0,a.kt)("p",null,"Agora vamos escrever endpoints para criar nova atividade e obter as atividades existentes, copie o seguinte c\xf3digo no arquivo 'DesignAutomation.js' antes da \xfaltima linha 'module.exports = router;'"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=routes/DesignAutomation.js",title:"routes/DesignAutomation.js"},'/// <summary>\n/// CreateActivity a new Activity\n/// </summary>\nrouter.post(\n  "/aps/designautomation/activities",\n  async (/*CreateActivity*/ req, res) => {\n    const activitySpecs = req.body;\n    // basic input validation\n    const zipFileName = activitySpecs.zipFileName;\n    const engineName = activitySpecs.engine;\n    // standard name for this sample\n    const appBundleName = zipFileName + "AppBundle";\n    const activityName = zipFileName + "Activity";\n    // get defined activities\n    const api = await Utils.dav3API(req.oauth_token);\n    let activities = null;\n    try {\n      activities = await api.getActivities();\n    } catch (ex) {\n      console.error(ex);\n      return res.status(500).json({\n        diagnostic: "Failed to get activity list",\n      });\n    }\n    const qualifiedActivityId = `${Utils.NickName}.${activityName}+${Utils.Alias}`;\n    if (!activities.data.includes(qualifiedActivityId)) {\n      // define the activity\n      // ToDo: parametrize for different engines...\n      const engineAttributes = Utils.EngineAttributes(engineName);\n      const commandLine = engineAttributes.commandLine.replace(\n        "{0}",\n        appBundleName\n      );\n      const activitySpec = {\n        id: activityName,\n        appbundles: [`${Utils.NickName}.${appBundleName}+${Utils.Alias}`],\n        commandLine: [commandLine],\n        engine: engineName,\n        parameters: {\n          inputFile: {\n            description: "input file",\n            localName: "$(inputFile)",\n            ondemand: false,\n            required: true,\n            verb: dav3.Verb.get,\n            zip: false,\n          },\n          inputJson: {\n            description: "input json",\n            localName: "params.json",\n            ondemand: false,\n            required: false,\n            verb: dav3.Verb.get,\n            zip: false,\n          },\n          outputFile: {\n            description: "output file",\n            localName: "outputFile." + engineAttributes.extension,\n            ondemand: false,\n            required: true,\n            verb: dav3.Verb.put,\n            zip: false,\n          },\n        },\n        settings: {\n          script: {\n            value: engineAttributes.script,\n          },\n        },\n      };\n      try {\n        const newActivity = await api.createActivity(activitySpec);\n      } catch (ex) {\n        console.error(ex);\n        return res.status(500).json({\n          diagnostic: "Failed to create new activity",\n        });\n      }\n      // specify the alias for this Activity\n      const aliasSpec = {\n        id: Utils.Alias,\n        version: 1,\n      };\n      try {\n        const newAlias = await api.createActivityAlias(activityName, aliasSpec);\n      } catch (ex) {\n        console.error(ex);\n        return res.status(500).json({\n          diagnostic: "Failed to create new alias for activity",\n        });\n      }\n      res.status(200).json({\n        activity: qualifiedActivityId,\n      });\n      return;\n    }\n    // as this activity points to a AppBundle "dev" alias (which points to the last version of the bundle),\n    // there is no need to update it (for this sample), but this may be extended for different contexts\n    res.status(200).json({\n      activity: "Activity already defined",\n    });\n  }\n);\n/// <summary>\n/// Get all Activities defined for this account\n/// </summary>\nrouter.get(\n  "/aps/designautomation/activities",\n  async (/*GetDefinedActivities*/ req, res) => {\n    const api = await Utils.dav3API(req.oauth_token);\n    // filter list of\n    let activities = null;\n    try {\n      activities = await api.getActivities();\n    } catch (ex) {\n      console.error(ex);\n      return res.status(500).json({\n        diagnostic: "Failed to get activity list",\n      });\n    }\n    let definedActivities = [];\n    for (let i = 0; i < activities.data.length; i++) {\n      let activity = activities.data[i];\n      if (\n        activity.startsWith(Utils.NickName) &&\n        activity.indexOf("$LATEST") === -1\n      )\n        definedActivities.push(activity.replace(Utils.NickName + ".", ""));\n    }\n    res.status(200).json(definedActivities);\n  }\n);\n')))}c.isMDXComponent=!0;var d=n(415);const p={},m="Definir Atividade",v={unversionedId:"tutorials/design-automation/define-activity",id:"tutorials/design-automation/define-activity",title:"Definir Atividade",description:"Atividade \xe9 a especifica\xe7\xe3o de uma a\xe7\xe3o que pode ser executada usando um mecanismo especificado. Ele especifica o n\xfamero de arquivos de entrada e sa\xedda, e o AppBundle e o ponto de entrada a ser usado.",source:"@site/i18n/pt/docusaurus-plugin-content-docs/current/03-tutorials/04-design-automation/03-define-activity.mdx",sourceDirName:"03-tutorials/04-design-automation",slug:"/tutorials/design-automation/define-activity",permalink:"/pt/tutorials/design-automation/define-activity",draft:!1,editUrl:"https://github.com/autodesk-platform-services/aps-tutorials-website/edit/master/docs/03-tutorials/04-design-automation/03-define-activity.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Criar Plugin",permalink:"/pt/tutorials/design-automation/prepare-plugin"},next:{title:"Executar item de trabalho",permalink:"/pt/tutorials/design-automation/execute-workitem"}},f={},g=[],y={toc:g};function b(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"definir-atividade"},"Definir Atividade"),(0,a.kt)("p",null,"Atividade \xe9 a especifica\xe7\xe3o de uma a\xe7\xe3o que pode ser executada usando um mecanismo especificado. Ele especifica o n\xfamero de arquivos de entrada e sa\xedda, e o AppBundle e o ponto de entrada a ser usado."),(0,a.kt)("p",null,"Neste exemplo de tutorial, a atividade tem 2 entradas (arquivo & dados JSON) e 1 sa\xedda (arquivo)."),(0,a.kt)(d.Z,{NodeJsVsCode:c,DotNetVsCode:l,DotNetVs2022:l,mdxType:"EnvTabs"}),(0,a.kt)("p",null,"Agora voc\xea pode clicar em Configurar (canto superior direito), selecionar o AppBundle, selecionar o Engine\ne clique em Definir Atividade, que deve definir e carregar o appbundle e definir\na atividade. O painel de resultados (lado esquerdo) mostra os respectivos ids. Todos os outros bot\xf5es\nn\xe3o funcionam ainda... vamos em frente."),(0,a.kt)(s.Z,{src:r,mdxType:"ResponsiveVideo"}))}b.isMDXComponent=!0}}]);