"use strict";(self.webpackChunkaps_tutorials_website=self.webpackChunkaps_tutorials_website||[]).push([[669],{4137:(e,n,a)=>{a.d(n,{Zo:()=>u,kt:()=>m});var t=a(7294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=t.createContext({}),p=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},u=function(e){var n=p(e.components);return t.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(a),m=o,g=c["".concat(l,".").concat(m)]||c[m]||d[m]||r;return a?t.createElement(g,s(s({ref:n},u),{},{components:a})):t.createElement(g,s({ref:n},u))}));function m(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,s=new Array(r);s[0]=c;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var p=2;p<r;p++)s[p]=a[p];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},425:(e,n,a)=>{a.d(n,{Z:()=>s});var t=a(7294),o=a(6010);const r="tabItem_Ymn6";function s(e){let{children:n,hidden:a,className:s}=e;return t.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,s),hidden:a},n)}},3992:(e,n,a)=>{a.d(n,{Z:()=>y});var t=a(7462),o=a(7294),r=a(6010),s=a(2957),i=a(6550),l=a(5238),p=a(3609),u=a(2560);function d(e){return function(e){return o.Children.map(e,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:n,label:a,attributes:t,default:o}}=e;return{value:n,label:a,attributes:t,default:o}}))}function c(e){const{values:n,children:a}=e;return(0,o.useMemo)((()=>{const e=n??d(a);return function(e){const n=(0,p.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function m(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:a}=e;const t=(0,i.k6)(),r=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,l._X)(r),(0,o.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(t.location.search);n.set(r,e),t.replace({...t.location,search:n.toString()})}),[r,t])]}function f(e){const{defaultValue:n,queryString:a=!1,groupId:t}=e,r=c(e),[s,i]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=a.find((e=>e.default))??a[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:r}))),[l,p]=g({queryString:a,groupId:t}),[d,f]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,r]=(0,u.Nk)(a);return[t,(0,o.useCallback)((e=>{a&&r.set(e)}),[a,r])]}({groupId:t}),k=(()=>{const e=l??d;return m({value:e,tabValues:r})?e:null})();(0,o.useLayoutEffect)((()=>{k&&i(k)}),[k]);return{selectedValue:s,selectValue:(0,o.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);i(e),p(e),f(e)}),[p,f,r]),tabValues:r}}var k=a(1048);const h="tabList__CuJ",v="tabItem_LNqP";function b(e){let{className:n,block:a,selectedValue:i,selectValue:l,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),c=e=>{const n=e.currentTarget,a=u.indexOf(n),t=p[a].value;t!==i&&(d(n),l(t))},m=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=u.indexOf(e.currentTarget)+1;n=u[a]??u[0];break}case"ArrowLeft":{const a=u.indexOf(e.currentTarget)-1;n=u[a]??u[u.length-1];break}}n?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},n)},p.map((e=>{let{value:n,label:a,attributes:s}=e;return o.createElement("li",(0,t.Z)({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,key:n,ref:e=>u.push(e),onKeyDown:m,onClick:c},s,{className:(0,r.Z)("tabs__item",v,s?.className,{"tabs__item--active":i===n})}),a??n)})))}function A(e){let{lazy:n,children:a,selectedValue:t}=e;if(a=Array.isArray(a)?a:[a],n){const e=a.find((e=>e.props.value===t));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},a.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==t}))))}function w(e){const n=f(e);return o.createElement("div",{className:(0,r.Z)("tabs-container",h)},o.createElement(b,(0,t.Z)({},e,n)),o.createElement(A,(0,t.Z)({},e,n)))}function y(e){const n=(0,k.Z)();return o.createElement(w,(0,t.Z)({key:String(n)},e))}},415:(e,n,a)=>{a.d(n,{Z:()=>s});var t=a(7294),o=a(3992),r=a(425);function s(e){let{NodeJsVsCode:n,DotNetVsCode:a,DotNetVs2022:s}=e;return t.createElement(o.Z,{groupId:"development-environment"},t.createElement(r.Z,{value:"nodejs-vscode",label:"Node.js & VSCode",default:!0},t.createElement(n,null)),t.createElement(r.Z,{value:"dotnet-vscode",label:".NET 6 & VSCode"},t.createElement(a,null)),t.createElement(r.Z,{value:"dotnet-vs2022",label:".NET 6 & VS2022"},t.createElement(s,null)))}},5299:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>I,contentTitle:()=>C,default:()=>E,frontMatter:()=>P,metadata:()=>D,toc:()=>S});var t=a(7462),o=a(7294),r=a(4137);const s=a.p+"assets/images/activity-bundle-configure-dd57a05087d020eded3e465ec6e5e564.webp",i=a.p+"assets/images/vscode_nodejsfs-87a933e2faf50a6b17322b823727eaee.webp",l={toc:[]};function p(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,t.Z)({},l,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Na pasta 'Controladores', crie um 'DesignAutomationController.cs' com o seguinte conte\xfado. Esta \xe9 apenas a classe, definiremos os pontos de extremidade mais tarde, mas observe o DesignAutomationHub no final, que nos permite notifica\xe7\xf5es push para o cliente via ",(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/aspnet/core/signalr/introduction?view=aspnetcore-6.0"},"SignalR"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs",metastring:"title=DesignAutomationController",title:"DesignAutomationController"},'using Autodesk.Forge;\nusing Autodesk.Forge.Client;\nusing Autodesk.Forge.DesignAutomation;\nusing Autodesk.Forge.DesignAutomation.Model;\nusing Autodesk.Forge.Model;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.SignalR;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\nusing RestSharp;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing Activity = Autodesk.Forge.DesignAutomation.Model.Activity;\nusing Alias = Autodesk.Forge.DesignAutomation.Model.Alias;\nusing AppBundle = Autodesk.Forge.DesignAutomation.Model.AppBundle;\nusing Parameter = Autodesk.Forge.DesignAutomation.Model.Parameter;\nusing WorkItem = Autodesk.Forge.DesignAutomation.Model.WorkItem;\nusing WorkItemStatus = Autodesk.Forge.DesignAutomation.Model.WorkItemStatus;\n\nnamespace designAutomationSample.Controllers\n{\n    [ApiController]\n    public class DesignAutomationController : ControllerBase\n    {\n        // Used to access the application folder (temp location for files & bundles)\n        private IWebHostEnvironment _env;\n        // used to access the SignalR Hub\n        private IHubContext<DesignAutomationHub> _hubContext;\n        // used to store the s3 upload payload;\n        private static PostCompleteS3UploadPayload _postCompleteS3UploadPayload;\n        // Local folder for bundles\n        public string LocalBundlesFolder { get { return Path.Combine(_env.WebRootPath, "bundles"); } }\n        /// Prefix for AppBundles and Activities\n        public static string NickName { get { return OAuthController.GetAppSetting("APS_CLIENT_ID"); } }\n        /// Alias for the app (e.g. DEV, STG, PROD). This value may come from an environment variable\n        public static string Alias { get { return "dev"; } }\n        //This property manager S3 Upload Payload\n        public static PostCompleteS3UploadPayload S3UploadPayload\n        {\n            get { return _postCompleteS3UploadPayload; }\n            set { _postCompleteS3UploadPayload = value; }\n        }\n        // Design Automation v3 API\n        DesignAutomationClient _designAutomation;\n        // Constructor, where env and hubContext are specified\n        public DesignAutomationController(IWebHostEnvironment env, IHubContext<DesignAutomationHub> hubContext, DesignAutomationClient api)\n        {\n            _designAutomation = api;\n            _env = env;\n            _hubContext = hubContext;\n        }\n        // **********************************\n        //\n        // Next we will add the methods here\n        //\n        // **********************************\n    }\n    /// <summary>\n    /// Class uses for SignalR\n    /// </summary>\n    public class DesignAutomationHub : Microsoft.AspNetCore.SignalR.Hub\n    {\n        public string GetConnectionId() { return Context.ConnectionId; }\n    }\n}\n')),(0,r.kt)("p",null,"Agora vamos adicionar alguns pontos de extremidade a essa classe. Os m\xe9todos a seguir devem ser copiados dentro da classe 'DesignAutomationController'."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"GetLocalBundles")),(0,r.kt)("p",null,"Olhe para a pasta 'bundles' e retorne uma lista de arquivos .ZIP."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'/// <summary>\n/// Names of app bundles on this project\n/// </summary>\n[HttpGet]\n[Route("api/appbundles")]\npublic string[] GetLocalBundles()\n{\n    // this folder is placed under the public folder, which may expose the bundles\n    // but it was defined this way so it be published on most hosts easily\n    return Directory.GetFiles(LocalBundlesFolder, "*.zip").Select(Path.GetFileNameWithoutExtension).ToArray();\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"GetAvailableEngines")),(0,r.kt)("p",null,"Para definir um pacote, tamb\xe9m precisamos do mecanismo, ent\xe3o esse ponto de extremidade retorna uma lista de todos os mecanismos dispon\xedveis."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'/// <summary>\n/// Return a list of available engines\n/// </summary>\n[HttpGet]\n[Route("api/aps/designautomation/engines")]\npublic async Task<List<string>> GetAvailableEngines()\n{\n    dynamic oauth = await OAuthController.GetInternalAsync();\n    List<string> allEngines = new List<string>();\n    // define Engines API\n    string paginationToken = null;\n    while (true)\n    {\n        Page<string> engines = await _designAutomation.GetEnginesAsync(paginationToken);\n        allEngines.AddRange(engines.Data);\n        if (engines.PaginationToken == null)\n            break;\n        paginationToken = engines.PaginationToken;\n    }\n    allEngines.Sort();\n    return allEngines; // return list of engines\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"CreateAppBundle")),(0,r.kt)("p",null,"\xc9 a\xed que definimos um novo AppBundle:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'/// <summary>\n/// Define a new appbundle\n/// </summary>\n[HttpPost]\n[Route("api/aps/designautomation/appbundles")]\npublic async Task<IActionResult> CreateAppBundle([FromBody]JObject appBundleSpecs)\n{\n    // basic input validation\n    string zipFileName = appBundleSpecs["zipFileName"].Value<string>();\n    string engineName = appBundleSpecs["engine"].Value<string>();\n    // standard name for this sample\n    string appBundleName = zipFileName + "AppBundle";\n    // check if ZIP with bundle is here\n    string packageZipPath = Path.Combine(LocalBundlesFolder, zipFileName + ".zip");\n    if (!System.IO.File.Exists(packageZipPath)) throw new Exception("Appbundle not found at " + packageZipPath);\n    // get defined app bundles\n    Page<string> appBundles = await _designAutomation.GetAppBundlesAsync();\n    // check if app bundle is already define\n    dynamic newAppVersion;\n    string qualifiedAppBundleId = string.Format("{0}.{1}+{2}", NickName, appBundleName, Alias);\n    if (!appBundles.Data.Contains(qualifiedAppBundleId))\n    {\n        // create an appbundle (version 1)\n        AppBundle appBundleSpec = new AppBundle()\n        {\n            Package = appBundleName,\n            Engine = engineName,\n            Id = appBundleName,\n            Description = string.Format("Description for {0}", appBundleName),\n        };\n        newAppVersion = await _designAutomation.CreateAppBundleAsync(appBundleSpec);\n        if (newAppVersion == null) throw new Exception("Cannot create new app");\n        // create alias pointing to v1\n        Alias aliasSpec = new Alias() { Id = Alias, Version = 1 };\n        Alias newAlias = await _designAutomation.CreateAppBundleAliasAsync(appBundleName, aliasSpec);\n    }\n    else\n    {\n        // create new version\n        AppBundle appBundleSpec = new AppBundle()\n        {\n            Engine = engineName,\n            Description = appBundleName\n        };\n        newAppVersion = await _designAutomation.CreateAppBundleVersionAsync(appBundleName, appBundleSpec);\n        if (newAppVersion == null) throw new Exception("Cannot create new version");\n        // update alias pointing to v+1\n        AliasPatch aliasSpec = new AliasPatch()\n        {\n            Version = newAppVersion.Version\n        };\n        Alias newAlias = await _designAutomation.ModifyAppBundleAliasAsync(appBundleName, Alias, aliasSpec);\n    }\n    // upload the zip with .bundle\n    using (var client = new HttpClient())\n    {\n        using (var formData = new MultipartFormDataContent())\n        {\n            foreach (var kv in newAppVersion.UploadParameters.FormData)\n            {\n                if (kv.Value != null)\n                {\n                    formData.Add(new StringContent(kv.Value), kv.Key);\n                }\n            }\n            using (var content = new StreamContent(new FileStream(packageZipPath, FileMode.Open)))\n            {\n                formData.Add(content, "file");\n                using (var request = new HttpRequestMessage(HttpMethod.Post, newAppVersion.UploadParameters.EndpointURL) { Content = formData })\n                {\n                    var response = await client.SendAsync(request);\n                    response.EnsureSuccessStatusCode();\n                }\n            }\n        }\n    }\n    return Ok(new { AppBundle = qualifiedAppBundleId, Version = newAppVersion.Version });\n}\n')),(0,r.kt)("p",null,"Como a classe 'DesignAutomationHub' agora est\xe1 definida (dentro deste controlador), abra o Startup.cs e, dentro do m\xe9todo Configure, adicione a seguinte linha"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'app.UseRouting();\napp.UseEndpoints(routes =>\n{\n    routes.MapHub<Controllers.DesignAutomationHub>("/api/signalr/designautomation");\n});\n')))}p.isMDXComponent=!0;const u={toc:[]};function d(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,t.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Dentro da pasta 'routes/' crie o arquivo 'DesignAutomation.js'."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Neste arquivo vamos escrever todos os endpoints, vamos adicionar a classe Utils que consiste em todas as fun\xe7\xf5es utilit\xe1rias como a cria\xe7\xe3o de inst\xe2ncia SDK de automa\xe7\xe3o de projeto, upload de arquivo e algumas fun\xe7\xf5es mais \xfateis que s\xe3o usadas neste exemplo.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=routes/DesignAutomation.js",title:"routes/DesignAutomation.js"},'const _path = require("path");\nconst _fs = require("fs");\nconst _url = require("url");\nconst express = require("express");\nconst http = require("https");\nconst formdata = require("form-data");\nconst bodyParser = require("body-parser");\nconst multer = require("multer");\nconst router = express.Router();\nconst { getClient } = require("./common/oauth");\nconst config = require("../config");\nconst dav3 = require("autodesk.forge.designautomation");\nconst ForgeAPI = require("forge-apis");\nrouter.use(bodyParser.json());\n// Middleware for obtaining a token for each request.\nrouter.use(async (req, res, next) => {\n  req.oauth_client = await getClient(/*config.scopes.internal*/);\n  req.oauth_token = req.oauth_client.getCredentials();\n  next();\n});\n// Static instance of the DA API\nlet dav3Instance = null;\nclass Utils {\n  static async Instance() {\n    if (dav3Instance === null) {\n      // Here it is ok to not await since we awaited in the call router.use()\n      dav3Instance = new dav3.AutodeskForgeDesignAutomationClient(\n        config.client\n      );\n      let FetchRefresh = async (data) => {\n        // data is undefined in a fetch, but contains the old credentials in a refresh\n        let client = await getClient();\n        let credentials = client.getCredentials();\n        // The line below is for testing\n        //credentials.expires_in = 30; credentials.expires_at = new Date(Date.now() + credentials.expires_in * 1000);\n        return credentials;\n      };\n      dav3Instance.authManager.authentications["2-legged"].fetchToken =\n        FetchRefresh;\n      dav3Instance.authManager.authentications["2-legged"].refreshToken =\n        FetchRefresh;\n    }\n    return dav3Instance;\n  }\n  /// <summary>\n  /// Returns the directory where bindles are stored on the local machine.\n  /// </summary>\n  static get LocalBundlesFolder() {\n    return _path.resolve(_path.join(__dirname, "../", "bundles"));\n  }\n  /// <summary>\n  /// Prefix for AppBundles and Activities\n  /// </summary>\n  static get NickName() {\n    return config.credentials.client_id;\n  }\n  /// <summary>\n  /// Alias for the app (e.g. DEV, STG, PROD). This value may come from an environment variable\n  /// </summary>\n  static get Alias() {\n    return "dev";\n  }\n  /// <summary>\n  /// Search files in a folder and filter them.\n  /// </summary>\n  static async findFiles(dir, filter) {\n    return new Promise((fulfill, reject) => {\n      _fs.readdir(dir, (err, files) => {\n        if (err) return reject(err);\n        if (filter !== undefined && typeof filter === "string")\n          files = files.filter((file) => {\n            return _path.extname(file) === filter;\n          });\n        else if (filter !== undefined && typeof filter === "object")\n          files = files.filter((file) => {\n            return filter.test(file);\n          });\n        fulfill(files);\n      });\n    });\n  }\n  /// <summary>\n  /// Create a new DAv3 client/API with default settings\n  /// </summary>\n  static async dav3API(oauth2) {\n    // There is 2 alternatives to setup an API instance, providing the access_token directly\n    // let apiClient2 = new dav3.AutodeskForgeDesignAutomationClient(/*config.client*/);\n    // apiClient2.authManager.authentications[\'2-legged\'].accessToken = oauth2.access_token;\n    //return (new dav3.AutodeskForgeDesignAutomationApi(apiClient));\n    // Or use the Auto-Refresh feature\n    let apiClient = await Utils.Instance();\n    return new dav3.AutodeskForgeDesignAutomationApi(apiClient);\n  }\n  /// <summary>\n  /// Helps identify the engine\n  /// </summary>\n  static EngineAttributes(engine) {\n    if (engine.includes("3dsMax"))\n      return {\n        commandLine:\n          \'$(engine.path)\\\\3dsmaxbatch.exe -sceneFile "$(args[inputFile].path)" "$(settings[script].path)"\',\n        extension: "max",\n        script:\n          "da = dotNetClass(\'Autodesk.Forge.Sample.DesignAutomation.Max.RuntimeExecute\')\\nda.ModifyWindowWidthHeight()\\n",\n      };\n    if (engine.includes("AutoCAD"))\n      return {\n        commandLine:\n          \'$(engine.path)\\\\accoreconsole.exe /i "$(args[inputFile].path)" /al "$(appbundles[{0}].path)" /s "$(settings[script].path)"\',\n        extension: "dwg",\n        script: "UpdateParam\\n",\n      };\n    if (engine.includes("Inventor"))\n      return {\n        commandLine:\n          \'$(engine.path)\\\\InventorCoreConsole.exe /i "$(args[inputFile].path)" /al "$(appbundles[{0}].path)"\',\n        extension: "ipt",\n        script: "",\n      };\n    if (engine.includes("Revit"))\n      return {\n        commandLine:\n          \'$(engine.path)\\\\revitcoreconsole.exe /i "$(args[inputFile].path)" /al "$(appbundles[{0}].path)"\',\n        extension: "rvt",\n        script: "",\n      };\n    throw new Error("Invalid engine");\n  }\n  static FormDataLength(form) {\n    return new Promise((fulfill, reject) => {\n      form.getLength((err, length) => {\n        if (err) return reject(err);\n        fulfill(length);\n      });\n    });\n  }\n  /// <summary>\n  /// Upload a file\n  /// </summary>\n  static uploadFormDataWithFile(filepath, endpoint, params = null) {\n    return new Promise(async (fulfill, reject) => {\n      const fileStream = _fs.createReadStream(filepath);\n      const form = new formdata();\n      if (params) {\n        const keys = Object.keys(params);\n        for (let i = 0; i < keys.length; i++)\n          form.append(keys[i], params[keys[i]]);\n      }\n      form.append("file", fileStream);\n      let headers = form.getHeaders();\n      headers["Cache-Control"] = "no-cache";\n      headers["Content-Length"] = await Utils.FormDataLength(form);\n      const urlinfo = _url.parse(endpoint);\n      const postReq = http.request(\n        {\n          host: urlinfo.host,\n          port: urlinfo.port || (urlinfo.protocol === "https:" ? 443 : 80),\n          path: urlinfo.pathname,\n          method: "POST",\n          headers: headers,\n        },\n        (response) => {\n          fulfill(response.statusCode);\n        },\n        (err) => {\n          reject(err);\n        }\n      );\n      form.pipe(postReq);\n    });\n  }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Pacote de aplicativos")),(0,r.kt)("p",null,"Antes de criar a atividade, precisamos definir o pacote de aplicativos com o plugin e selecionar o mecanismo apropriado. Copie & cole os seguintes pontos de extremidade ap\xf3s a classe utils."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'/// <summary>\n/// Names of app bundles on this project\n/// </summary>\nrouter.get("/appbundles", async (/*GetLocalBundles*/ req, res) => {\n  // this folder is placed under the public folder, which may expose the bundles\n  // but it was defined this way so it be published on most hosts easily\n  let bundles = await Utils.findFiles(Utils.LocalBundlesFolder, ".zip");\n  bundles = bundles.map((fn) => _path.basename(fn, ".zip"));\n  res.json(bundles);\n});\n/// <summary>\n/// Return a list of available engines\n/// </summary>\nrouter.get(\n  "/aps/designautomation/engines",\n  async (/*GetAvailableEngines*/ req, res) => {\n    let that = this;\n    let Allengines = [];\n    let paginationToken = null;\n    try {\n      const api = await Utils.dav3API(req.oauth_token);\n      while (true) {\n        let engines = await api.getEngines({ page: paginationToken });\n        Allengines = Allengines.concat(engines.data);\n        if (engines.paginationToken == null) break;\n        paginationToken = engines.paginationToken;\n      }\n      res.json(Allengines.sort()); // return list of engines\n    } catch (ex) {\n      console.error(ex);\n      res.json([]);\n    }\n  }\n);\n/// <summary>\n/// Define a new appbundle\n/// </summary>\nrouter.post(\n  "/aps/designautomation/appbundles",\n  async (/*CreateAppBundle*/ req, res) => {\n    const appBundleSpecs = req.body;\n    // basic input validation\n    const zipFileName = appBundleSpecs.zipFileName;\n    const engineName = appBundleSpecs.engine;\n    // standard name for this sample\n    const appBundleName = zipFileName + "AppBundle";\n    // check if ZIP with bundle is here\n    const packageZipPath = _path.join(\n      Utils.LocalBundlesFolder,\n      zipFileName + ".zip"\n    );\n    // get defined app bundles\n    const api = await Utils.dav3API(req.oauth_token);\n    let appBundles = null;\n    try {\n      appBundles = await api.getAppBundles();\n    } catch (ex) {\n      console.error(ex);\n      return res.status(500).json({\n        diagnostic: "Failed to get the Bundle list",\n      });\n    }\n    // check if app bundle is already define\n    let newAppVersion = null;\n    const qualifiedAppBundleId = `${Utils.NickName}.${appBundleName}+${Utils.Alias}`;\n    if (!appBundles.data.includes(qualifiedAppBundleId)) {\n      // create an appbundle (version 1)\n      // const appBundleSpec = {\n      //         package: appBundleName,\n      //         engine: engineName,\n      //         id: appBundleName,\n      //         description: `Description for ${appBundleName}`\n      //     };\n      const appBundleSpec = dav3.AppBundle.constructFromObject({\n        package: appBundleName,\n        engine: engineName,\n        id: appBundleName,\n        description: `Description for ${appBundleName}`,\n      });\n      try {\n        newAppVersion = await api.createAppBundle(appBundleSpec);\n      } catch (ex) {\n        console.error(ex);\n        return res.status(500).json({\n          diagnostic: "Cannot create new app",\n        });\n      }\n      // create alias pointing to v1\n      const aliasSpec =\n        //dav3.Alias.constructFromObject({\n        {\n          id: Utils.Alias,\n          version: 1,\n        };\n      try {\n        const newAlias = await api.createAppBundleAlias(\n          appBundleName,\n          aliasSpec\n        );\n      } catch (ex) {\n        console.error(ex);\n        return res.status(500).json({\n          diagnostic: "Failed to create an alias",\n        });\n      }\n    } else {\n      // create new version\n      const appBundleSpec =\n        //dav3.AppBundle.constructFromObject({\n        {\n          engine: engineName,\n          description: appBundleName,\n        };\n      try {\n        newAppVersion = await api.createAppBundleVersion(\n          appBundleName,\n          appBundleSpec\n        );\n      } catch (ex) {\n        console.error(ex);\n        return res.status(500).json({\n          diagnostic: "Cannot create new version",\n        });\n      }\n      // update alias pointing to v+1\n      const aliasSpec =\n        //dav3.AliasPatch.constructFromObject({\n        {\n          version: newAppVersion.version,\n        };\n      try {\n        const newAlias = await api.modifyAppBundleAlias(\n          appBundleName,\n          Utils.Alias,\n          aliasSpec\n        );\n      } catch (ex) {\n        console.error(ex);\n        return res.status(500).json({\n          diagnostic: "Failed to create an alias",\n        });\n      }\n    }\n    // upload the zip with .bundle\n    try {\n      // curl https://bucketname.s3.amazonaws.com/\n      // -F key = apps/myApp/myfile.zip\n      // -F content-type = application/octet-stream\n      // -F policy = eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)\n      // -F x-amz-signature = 800e52d73579387757e1c1cd88762...(trimmed)\n      // -F x-amz-credential = AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/\n      // -F x-amz-algorithm = AWS4-HMAC-SHA256\n      // -F x-amz-date = 20180621T091656Z\n      // -F file=@E:myfile.zip\n      //\n      // The \u2018file\u2019 field must be at the end, all fields after \u2018file\u2019 will be ignored.\n      await Utils.uploadFormDataWithFile(\n        packageZipPath,\n        newAppVersion.uploadParameters.endpointURL,\n        newAppVersion.uploadParameters.formData\n      );\n    } catch (ex) {\n      console.error(ex);\n      return res.status(500).json({\n        diagnostic: "Failed to upload bundle on s3",\n      });\n    }\n    res.status(200).json({\n      appBundle: qualifiedAppBundleId,\n      version: newAppVersion.version,\n    });\n  }\n);\nmodule.exports = router;\n')),(0,r.kt)("p",null,'Now let\'s "mount" the router to our server application by modifying the server.js:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=server.js",title:"server.js"},'const _path = require("path");\nconst express = require("express");\nconst cookieSession = require("cookie-session");\nconst config = require("./config");\nif (!config.credentials.client_id || !config.credentials.client_secret)\n  return console.error(\n    "Missing APS_CLIENT_ID or APS_CLIENT_SECRET env variables."\n  );\nlet app = express();\napp.use(express.static(_path.join(__dirname, "./wwwroot")));\napp.use(\n  cookieSession({\n    name: "aps_session",\n    keys: ["aps_secure_key"],\n    maxAge: 60 * 60 * 1000, // 1 hour, same as the 2 legged lifespan token\n  })\n);\napp.use(\n  express.json({\n    limit: "50mb",\n  })\n);\n// highlight-start\napp.use("/api", require("./routes/DesignAutomation"));\n// highlight-end\napp.set("port", process.env.PORT || 8080);\nmodule.exports = app;\n')))}d.isMDXComponent=!0;const c={toc:[{value:"Criar um novo projeto",id:"criar-um-novo-projeto",level:3},{value:"Evento p\xf3s-compila\xe7\xe3o",id:"evento-p\xf3s-compila\xe7\xe3o",level:2}]};function m(e){let{components:n,...o}=e;return(0,r.kt)("wrapper",(0,t.Z)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Esta etapa ir\xe1 ajud\xe1-lo a criar um plug-in b\xe1sico do AutoCAD para Design Automation. Para obter mais informa\xe7\xf5es, visite o tutorial ",(0,r.kt)("a",{parentName:"p",href:"https://knowledge.autodesk.com/support/autocad/learn-explore/caas/simplecontent/content/my-first-autocad-plug-overview.html"},"My First AutoCAD Plugin"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Voc\xea pode ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/autodesk-platform-services/aps-design-automation-dotnet/blob/master/designAutomationSample/wwwroot/bundles/UpdateDWGParam.zip"},"baixar o Bundle ZIP")," na pasta 'bundles/' (Node.js) ou '/designAutomationSample/wwwroot/bundles' (.NET 6) e ",(0,r.kt)("a",{parentName:"p",href:"#upload-plugin-bundle"},"pular para a se\xe7\xe3o **Upload Plugin Bundle"),".")),(0,r.kt)("h3",{id:"criar-um-novo-projeto"},"Criar um novo projeto"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Clique com o bot\xe3o direito do mouse na solu\xe7\xe3o, em ",(0,r.kt)("strong",{parentName:"li"},"Adicionar")," >> ",(0,r.kt)("strong",{parentName:"li"},"Novo Projeto"),"."),(0,r.kt)("li",{parentName:"ul"},"Selecione ",(0,r.kt)("strong",{parentName:"li"},"Windows Desktop"),", depois ",(0,r.kt)("strong",{parentName:"li"},"Class Library")," e, finalmente, nomeie-o 'UpdateDWGParam'."),(0,r.kt)("li",{parentName:"ul"},"Em seguida, clique com o bot\xe3o direito do mouse no projeto, v\xe1 para ",(0,r.kt)("strong",{parentName:"li"},"Gerenciar pacotes NuGet..."),", em ",(0,r.kt)("strong",{parentName:"li"},"Navegador")," voc\xea pode procurar por ",(0,r.kt)("strong",{parentName:"li"},"AutoCAD.NET")," e instalar 'AutoCAD.NET.Core' (que tamb\xe9m instala 'AutoCAD.NET.Model')."),(0,r.kt)("li",{parentName:"ul"},"Em seguida, procure e instale 'Newtonsoft.Json' (que \xe9 usado para analisar dados de entrada no formato JSON).")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Selecione .NET Framework 4.8. Se n\xe3o estiver listado, ",(0,r.kt)("a",{parentName:"p",href:"https://dotnet.microsoft.com/download/dotnet-framework/net48"},"instale o Dev Pack"),".")),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(7417).Z,width:"800",height:"478"})),(0,r.kt)("p",null,"Como resultado, o ",(0,r.kt)("strong",{parentName:"p"},"package.config")," deve ter a seguinte apar\xeancia. Este exemplo usa a vers\xe3o 20, que deve funcionar em todas as vers\xf5es dispon\xedveis. Voc\xea pode ajustar para uma vers\xe3o espec\xedfica."),(0,r.kt)("p",null,"O projeto deve conter uma classe 'Class1.cs', vamos renomear o arquivo para 'Commands.cs' (para consist\xeancia)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs",metastring:"title=Commands.cs",title:"Commands.cs"},'using Autodesk.AutoCAD.ApplicationServices.Core;\nusing Autodesk.AutoCAD.DatabaseServices;\nusing Autodesk.AutoCAD.Runtime;\nusing Newtonsoft.Json;\nusing System.IO;\n[assembly: CommandClass(typeof(UpdateDWGParam.Commands))]\n[assembly: ExtensionApplication(null)]\nnamespace UpdateDWGParam\n{\n    public class Commands\n    {\n        [CommandMethod("UpdateParam", CommandFlags.Modal)]\n        public static void UpdateParam()\n        {\n            //Get active document of drawing with Dynamic block\n            var doc = Application.DocumentManager.MdiActiveDocument;\n            var db = doc.Database;\n            // read input parameters from JSON file\n            InputParams inputParams = JsonConvert.DeserializeObject<InputParams>(File.ReadAllText("params.json"));\n            using (Transaction t = db.TransactionManager.StartTransaction())\n            {\n                var bt = t.GetObject(db.BlockTableId, OpenMode.ForRead) as BlockTable;\n                foreach (ObjectId btrId in bt)\n                {\n                    //get the blockDef and check if is anonymous\n                    BlockTableRecord btr = (BlockTableRecord)t.GetObject(btrId, OpenMode.ForRead);\n                    if (btr.IsDynamicBlock)\n                    {\n                        //get all anonymous blocks from this dynamic block\n                        ObjectIdCollection anonymousIds = btr.GetAnonymousBlockIds();\n                        ObjectIdCollection dynBlockRefs = new ObjectIdCollection();\n                        foreach (ObjectId anonymousBtrId in anonymousIds)\n                        {\n                            //get the anonymous block\n                            BlockTableRecord anonymousBtr = (BlockTableRecord)t.GetObject(anonymousBtrId, OpenMode.ForRead);\n                            //and all references to this block\n                            ObjectIdCollection blockRefIds = anonymousBtr.GetBlockReferenceIds(true, true);\n                            foreach (ObjectId id in blockRefIds)\n                            {\n                                dynBlockRefs.Add(id);\n                            }\n                        }\n                        if (dynBlockRefs.Count > 0)\n                        {\n                            //Get the first dynamic block reference, we have only one Dyanmic Block reference in Drawing\n                            var dBref = t.GetObject(dynBlockRefs[0], OpenMode.ForWrite) as BlockReference;\n                            UpdateDynamicProperties(dBref, inputParams);\n                        }\n                    }\n                }\n                t.Commit();\n            }\n            LogTrace("Saving file...");\n            db.SaveAs("outputFile.dwg", DwgVersion.Current);\n        }\n        /// <summary>\n        /// This updates the Dyanmic Blockreference with given Width and Height\n        /// The initial parameters of Dynamic Blockrefence, Width =20.00 and Height =40.00\n        /// </summary>\n        /// <param Editor="ed"></param>\n        /// <param BlockReference="br"></param>\n        /// <param String="name"></param>\n        private static void UpdateDynamicProperties(BlockReference br, InputParams inputParams)\n        {\n            // Only continue is we have a valid dynamic block\n            if (br != null && br.IsDynamicBlock)\n            {\n                // Get the dynamic block\'s property collection\n                DynamicBlockReferencePropertyCollection pc = br.DynamicBlockReferencePropertyCollection;\n                foreach (DynamicBlockReferenceProperty prop in pc)\n                {\n                    switch (prop.PropertyName)\n                    {\n                        case "Width":\n                            prop.Value = inputParams.Width;\n                            break;\n                        case "Height":\n                            prop.Value = inputParams.Height;\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n        }\n        /// <summary>\n        /// This will appear on the Design Automation output\n        /// </summary>\n        private static void LogTrace(string format, params object[] args) { Application.DocumentManager.MdiActiveDocument.Editor.WriteMessage(format, args); }\n    }\n    public class InputParams\n    {\n        public double Width { get; set; }\n        public double Height { get; set; }\n    }\n}\n')),(0,r.kt)("p",null,"Este \xe9 o c\xf3digo principal que ser\xe1 executado com o AutoCAD. Copie o conte\xfado a seguir para 'Commands.cs'. A classe cont\xe9m um comando personalizado do AutoCAD, 'UpdateParam', definido como um m\xe9todo com o mesmo nome. Esse comando \xe9 chamado pelo mecanismo Design Automation, conforme ser\xe1 especificado na ",(0,r.kt)("strong",{parentName:"p"},"Atividade")," (pr\xf3xima etapa deste tutorial)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:"title=PackageContents.xml",title:"PackageContents.xml"},'<?xml version="1.0" encoding="utf-8" ?>\n<ApplicationPackage SchemaVersion="1.0" Version="1.0" ProductCode="{F11EA57A-1E7E-4B6D-8E81-986B071E3E07}" Name="AutoCADDesignAutomation" Description="Sample Plugin for AutoCAD" Author="tutorials.autodesk.io>">\n  <CompanyDetails Name="Autodesk, Inc" Url="http://tutorials.autodesk.io" Email="forge.help@autodesk.com"/>\n  <Components>\n    <RuntimeRequirements OS="Win64" Platform="AutoCAD"/>\n    <ComponentEntry AppName="UpdateWindowParameters" ModuleName="./Contents/UpdateDWGParam.dll" AppDescription="AutoCAD .NET App to update parameters of Dynamic blockreference in AutoCAD Drawing" LoadOnCommandInvocation="True" LoadOnAutoCADStartup="True">\n      <Commands GroupName="FPDCommands">\n        <Command Global="UpdateParam" Local="UpdateParam"/>\n      </Commands>\n    </ComponentEntry>\n  </Components>\n</ApplicationPackage>\n')),(0,r.kt)("p",null,"Crie uma pasta chamada 'UpdateDWGParam.bundle' e, dentro, um arquivo chamado 'PackageContents.xml', em seguida, copie o seguinte conte\xfado para ele. Saiba mais em ",(0,r.kt)("a",{parentName:"p",href:"https://help.autodesk.com/view/ACD/2023/ENU/?guid=GUID-BC76355D-682B-46ED-B9B7-66C95EEF2BD0"},"PackageContents.xml Format Reference"),". Esse arquivo define o novo comando personalizado do AutoCAD 'UpdateParam' que ser\xe1 chamado quando o Design Automation for executado."),(0,r.kt)("p",null,"Por fim, crie uma subpasta chamada 'Conte\xfado' e deixe-a vazia. Neste ponto, o projeto deve se parecer com:"),(0,r.kt)("h2",{id:"evento-p\xf3s-compila\xe7\xe3o"},"Evento p\xf3s-compila\xe7\xe3o"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Para Node.js \xe9 necess\xe1rio ajustar a pasta de sa\xedda ZIP do AppBundle.")),(0,r.kt)("p",null,"Agora precisamos ZIP a pasta .bundle. Clique com o bot\xe3o direito do mouse no projeto, selecione ",(0,r.kt)("strong",{parentName:"p"},"Propriedades"),", abra ",(0,r.kt)("strong",{parentName:"p"},"Eventos de compila\xe7\xe3o")," e copie o seguinte para o campo ",(0,r.kt)("strong",{parentName:"p"},"Linha de comando de evento p\xf3s-compila\xe7\xe3o"),", conforme mostrado na imagem abaixo."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'xcopy /Y /F "$(TargetDir)*.dll" "$(ProjectDir)UpdateDWGParam.bundle\\Contents\\"\ndel /F "$(ProjectDir)..\\designAutomationSample\\wwwroot\\bundles\\UpdateDWGParam.zip"\n"C:\\Program Files\\7-Zip\\7z.exe" a -tzip "$(ProjectDir)../designAutomationSample/wwwroot/bundles/UpdateDWGParam.zip" "$(ProjectDir)UpdateDWGParam.bundle\\" -xr0!*.pdb\n')),(0,r.kt)("p",null,"This will copy the DLL from ",(0,r.kt)("inlineCode",{parentName:"p"},"/bin/debug/")," into ",(0,r.kt)("inlineCode",{parentName:"p"},".bundle/Contents")," folder, then use ",(0,r.kt)("a",{parentName:"p",href:"https://www.7-zip.org/"},"7zip")," to create a zip, then finally copy the ZIP into ",(0,r.kt)("inlineCode",{parentName:"p"},"/bundles")," folders of the webapp.\n",(0,r.kt)("img",{src:a(3090).Z,width:"724",height:"449"})),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Observe como o evento ",(0,r.kt)("strong",{parentName:"p"},"Post-build")," usa os nomes de projeto e pasta, portanto, verifique se voc\xea est\xe1 usando esses nomes.")),(0,r.kt)("p",null,"Se voc\xea criar o projeto 'UpdateDWGParam' agora, voc\xea ver\xe1 algo assim na janela ",(0,r.kt)("strong",{parentName:"p"},"Output"),". Observe as 2 pastas e 3 arquivos zipados. O arquivo zip \xe9 criado diretamente na pasta '/wwwroot/bundles'. Isso significa que voc\xea est\xe1 indo muito bem!"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(4848).Z,width:"1013",height:"345"})))}m.isMDXComponent=!0;const g={toc:[{value:"Pr\xe9-requisitos",id:"pr\xe9-requisitos",level:2},{value:"Criar um novo projeto",id:"criar-um-novo-projeto",level:2},{value:"SampleAutomation.cs",id:"sampleautomationcs",level:2},{value:"Evento p\xf3s-compila\xe7\xe3o",id:"evento-p\xf3s-compila\xe7\xe3o",level:2}]};function f(e){let{components:n,...o}=e;return(0,r.kt)("wrapper",(0,t.Z)({},g,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Esta etapa ajudar\xe1 voc\xea a criar um plug-in b\xe1sico do Inventor. Para obter mais informa\xe7\xf5es, visite o tutorial ",(0,r.kt)("a",{parentName:"p",href:"https://knowledge.autodesk.com/support/inventor-products/learn-explore/caas/simplecontent/content/my-first-inventor-plug-overview.html"},"My First Inventor Plugin"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Voc\xea pode ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/autodesk-platform-services/aps-design-automation-nodejs/tree/nodejs/bundles/UpdateIPTParam.zip"},"baixar o Bundle ZIP")," na pasta 'bundles/' (Node.js) ou '/designAutomationSample/wwwroot/bundles' (.NET Core) e ",(0,r.kt)("a",{parentName:"p",href:"#upload-plugin-bundle"},"pular para a se\xe7\xe3o ",(0,r.kt)("strong",{parentName:"a"},"Upload Plugin Bundle")),".")),(0,r.kt)("h2",{id:"pr\xe9-requisitos"},"Pr\xe9-requisitos"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Design Automation for Inventor")," template: v\xe1 para o Visual Studio Market Place, baixe e abra-o em ",(0,r.kt)("a",{parentName:"li",href:"https://marketplace.visualstudio.com/items?itemName=Autodesk.DesignAutomation"},"this link"),", em seguida, siga os passos para instalar.")),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(5974).Z,width:"800",height:"461"})),(0,r.kt)("h2",{id:"criar-um-novo-projeto"},"Criar um novo projeto"),(0,r.kt)("p",null,"Clique com o bot\xe3o direito do mouse na solu\xe7\xe3o, em ",(0,r.kt)("strong",{parentName:"p"},"Adicionar")," >> em ",(0,r.kt)("strong",{parentName:"p"},"Novo Projeto"),". Procure por modelos ",(0,r.kt)("strong",{parentName:"p"},"Inventor"),", depois ",(0,r.kt)("strong",{parentName:"p"},"Projeto de plugin")," e, finalmente, nomeie-o como 'UpdateIPTParam'. Clique com o bot\xe3o direito do mouse no projeto, v\xe1 para ",(0,r.kt)("strong",{parentName:"p"},"Gerenciar pacotes NuGet..."),", em ",(0,r.kt)("strong",{parentName:"p"},"Procurar")," voc\xea pode selecionar 'Newtonsoft.Json' e atualizar (este pacote j\xe1 est\xe1 na solu\xe7\xe3o, se n\xe3o, instalar)"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Selecione .NET Framework 4.7. Se n\xe3o estiver listado, ",(0,r.kt)("a",{parentName:"p",href:"https://dotnet.microsoft.com/download/dotnet-framework/net47"},"instale o Dev Pack"),".")),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(9380).Z,width:"800",height:"568"})),(0,r.kt)("h2",{id:"sampleautomationcs"},"SampleAutomation.cs"),(0,r.kt)("p",null,"Abra o arquivo 'SampleAutomation.cs' e copie o seguinte conte\xfado para ele. \xc9 aqui que os par\xe2metros s\xe3o atualizados sob o m\xe9todo 'Run'."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dotnet",metastring:"title=SampleAutomation.cs",title:"SampleAutomation.cs"},'using Inventor;\nusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\nusing System.Threading;\nnamespace UpdateIPTParam\n{\n    [ComVisible(true)]\n    public class SampleAutomation\n    {\n        private InventorServer m_server;\n        public SampleAutomation(InventorServer app) { m_server = app; }\n        public void Run(Document doc)\n        {\n            try\n            {\n                // update parameters in the doc\n                ChangeParameters(doc);\n                // generate outputs\n                var docDir = System.IO.Path.GetDirectoryName(doc.FullFileName);\n                // save output file\n                var documentType = doc.DocumentType;\n                if (documentType == DocumentTypeEnum.kPartDocumentObject)\n                {\n                    // the name must be in sync with OutputIpt localName in Activity\n                    var fileName = System.IO.Path.Combine(docDir, "outputFile.ipt");\n                    // save file\n                    doc.SaveAs(fileName, false);\n                }\n            }\n            catch (Exception e) { LogTrace("Processing failed: {0}", e.ToString()); }\n        }\n        /// <summary>\n        /// Change parameters in Inventor document.\n        /// </summary>\n        /// <param name="doc">The Inventor document.</param>\n        /// <param name="json">JSON with changed parameters.</param>\n        public void ChangeParameters(Document doc)\n        {\n            var theParams = GetParameters(doc);\n            Dictionary<string, string> parameters = JsonConvert.DeserializeObject<Dictionary<string, string>>(System.IO.File.ReadAllText("params.json"));\n            foreach (KeyValuePair<string, string> entry in parameters)\n            {\n                try\n                {\n                    Parameter param = theParams[entry.Key.ToLower()];\n                    param.Expression = entry.Value;\n                }\n                catch (Exception e) { LogTrace("Cannot update {0}: {1}", entry.Key, e.Message); }\n            }\n            doc.Update();\n        }\n        /// <summary>\n        /// Get parameters for the document.\n        /// </summary>\n        /// <returns>Parameters. Throws exception if parameters are not found.</returns>\n        private static Parameters GetParameters(Document doc)\n        {\n            var docType = doc.DocumentType;\n            switch (docType)\n            {\n                case DocumentTypeEnum.kAssemblyDocumentObject:\n                    var asm = doc as AssemblyDocument;\n                    return asm.ComponentDefinition.Parameters;\n                case DocumentTypeEnum.kPartDocumentObject:\n                    var ipt = doc as PartDocument;\n                    return ipt.ComponentDefinition.Parameters;\n                default:\n                    throw new ApplicationException(string.Format("Unexpected document type ({0})", docType));\n            }\n        }\n        /// <summary>\n        /// This will appear on the Design Automation output\n        /// </summary>\n        private static void LogTrace(string format, params object[] args) { Trace.TraceInformation(format, args); }\n    }\n}\n')),(0,r.kt)("h2",{id:"evento-p\xf3s-compila\xe7\xe3o"},"Evento p\xf3s-compila\xe7\xe3o"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Para Node.js \xe9 necess\xe1rio ajustar a pasta de sa\xedda ZIP do AppBundle.")),(0,r.kt)("p",null,"Agora precisamos ZIP a pasta '.bundle'. Clique com o bot\xe3o direito do mouse no projeto, selecione ",(0,r.kt)("strong",{parentName:"p"},"Propriedades"),", abra ",(0,r.kt)("strong",{parentName:"p"},"Eventos de compila\xe7\xe3o")," e copie o seguinte para o campo ",(0,r.kt)("strong",{parentName:"p"},"Linha de comando de evento p\xf3s-compila\xe7\xe3o"),", conforme mostrado na imagem abaixo."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'xcopy /Y /F "$(ProjectDir)PackageContents.xml" "$(TargetDir)\\Bundle\\$(MSBuildProjectName).bundle\\"\nxcopy /Y /F "$(TargetDir)*.*" "$(TargetDir)\\Bundle\\$(MSBuildProjectName).bundle\\Contents\\"\ndel /F "$(ProjectDir)..\\designAutomationSample\\wwwroot\\bundles\\UpdateIPTParam.zip"\n"C:\\Program Files\\7-Zip\\7z.exe" a -tzip "$(ProjectDir)../designAutomationSample/wwwroot/bundles/UpdateIPTParam.zip" "$(TargetDir)\\bundle\\$(MSBuildProjectName).bundle\\" -xr0!*.pdb\n')),(0,r.kt)("p",null,"Isso copiar\xe1 a DLL de '/bin/debug/' para a pasta '.bundle/Contents', depois usar\xe1 ",(0,r.kt)("a",{parentName:"p",href:"https://www.7-zip.org/"},"7zip")," para criar um zip e, finalmente, copiar\xe1 o ZIP para as pastas '/bundles' do webapp."),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(6757).Z,width:"709",height:"541"})),(0,r.kt)("p",null,"Se voc\xea criar o projeto 'UpdateIPTParam' agora, voc\xea deve ver algo assim na janela ",(0,r.kt)("strong",{parentName:"p"},"Output"),". Observe as 2 pastas e v\xe1rios arquivos zipados. O arquivo zip \xe9 criado diretamente na pasta '/wwwroot/bundles'. Isso significa que voc\xea est\xe1 indo muito bem!"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(5984).Z,width:"1016",height:"326"})))}f.isMDXComponent=!0;const k={toc:[{value:"Criar um novo projeto",id:"criar-um-novo-projeto",level:3},{value:"Autodesk.Forge.Sample.DesignAutomation.Revit.addin",id:"autodeskforgesampledesignautomationrevitaddin",level:4},{value:"Evento p\xf3s-compila\xe7\xe3o",id:"evento-p\xf3s-compila\xe7\xe3o",level:4}]};function h(e){let{components:n,...o}=e;return(0,r.kt)("wrapper",(0,t.Z)({},k,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Esta etapa ir\xe1 ajud\xe1-lo a criar um plugin b\xe1sico do Revit para Design Automation. Para obter mais informa\xe7\xf5es, visite o tutorial ",(0,r.kt)("a",{parentName:"p",href:"https://knowledge.autodesk.com/support/revit-products/learn-explore/caas/simplecontent/content/my-first-revit-plug-overview.html"},"My First Revit Plugin"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Voc\xea pode ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/autodesk-platform-services/aps-design-automation-nodejs/tree/nodejs/bundles/UpdateRVTParam.zip"},"baixar o Bundle ZIP")," na pasta 'bundles/' (Node.js) ou '/designAutomationSample/wwwroot/bundles' (.NET 6) e ",(0,r.kt)("a",{parentName:"p",href:"#upload-plugin-bundle"},"pular para a se\xe7\xe3o ",(0,r.kt)("strong",{parentName:"a"},"Upload Plugin Bundle")),".")),(0,r.kt)("h3",{id:"criar-um-novo-projeto"},"Criar um novo projeto"),(0,r.kt)("p",null,"ight-clique na solu\xe7\xe3o, o ",(0,r.kt)("strong",{parentName:"p"},"Add")," >> ",(0,r.kt)("strong",{parentName:"p"},"Novo projeto"),". Selecione ",(0,r.kt)("strong",{parentName:"p"},"Windows Desktop"),", depois ",(0,r.kt)("strong",{parentName:"p"},"Class Library")," e, finalmente, nomeie-o 'UpdateRVTParam'."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Selecione .NET Framework 4.8. Se n\xe3o estiver listado, ",(0,r.kt)("a",{parentName:"p",href:"https://dotnet.microsoft.com/download/dotnet-framework/net48"},"instale o Dev Pack"),".")),(0,r.kt)("p",null,"Clique com o bot\xe3o direito do mouse em ",(0,r.kt)("strong",{parentName:"p"},"Refer\xeancias"),", depois em ",(0,r.kt)("strong",{parentName:"p"},"Adicionar Refer\xeancia")," e ",(0,r.kt)("strong",{parentName:"p"},"Procurar")," para 'RevitAPI.dll' (por padr\xe3o na pasta 'C:\\Arquivos de Programas\\Autodesk\\Revit 201x'). Em seguida, clique com o bot\xe3o direito do mouse nesta refer\xeancia ",(0,r.kt)("strong",{parentName:"p"},"RevitAPI"),", v\xe1 para ",(0,r.kt)("strong",{parentName:"p"},"Propriedades"),", em seguida, defina ",(0,r.kt)("strong",{parentName:"p"},"Copiar Local")," como ",(0,r.kt)("strong",{parentName:"p"},"False"),"."),(0,r.kt)("p",null,"Em seguida, clique com o bot\xe3o direito do mouse no projeto, v\xe1 para ",(0,r.kt)("strong",{parentName:"p"},"Gerenciar pacotes NuGet..."),", em ",(0,r.kt)("strong",{parentName:"p"},"Navegador")," voc\xea pode procurar por ",(0,r.kt)("strong",{parentName:"p"},"DesignAutomation.Revit")," e instalar 'Autodesk.Forge.DesignAutomation.Revit' (escolha a vers\xe3o apropriada do Revit que voc\xea precisa). Em seguida, pesquise e instale 'Newtonsoft.Json' (que \xe9 usado para analisar dados de entrada no formato JSON)."),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(4853).Z,width:"800",height:"475"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:"title=package.config",title:"package.config"},'<?xml version="1.0" encoding="utf-8"?>\n<packages>\n  <package id="Autodesk.Forge.DesignAutomation.Revit" version="2021.0.0" targetFramework="net48" />\n  <package id="Microsoft.CSharp" version="4.5.0" targetFramework="net48" />\n  <package id="Newtonsoft.Json" version="12.0.1" targetFramework="net48" />\n</packages>\n')),(0,r.kt)("p",null,"O projeto deve conter uma classe 'Class1.cs', vamos renomear o arquivo para Commands.cs (para consist\xeancia)."),(0,r.kt)("p",null,"Neste ponto, o projeto deve ter a seguinte apar\xeancia"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(3494).Z,width:"303",height:"400"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs",metastring:"title=Commands.cs",title:"Commands.cs"},'using Autodesk.Revit.ApplicationServices;\nusing Autodesk.Revit.Attributes;\nusing Autodesk.Revit.DB;\nusing DesignAutomationFramework;\nusing Newtonsoft.Json;\nusing System.Collections.Generic;\nusing System.IO;\nnamespace Autodesk.Forge.Sample.DesignAutomation.Revit\n{\n    [Transaction(TransactionMode.Manual)]\n    [Regeneration(RegenerationOption.Manual)]\n    public class Commands : IExternalDBApplication\n    {\n        //Path of the project(i.e)project where your Window family files are present\n        string OUTPUT_FILE = "OutputFile.rvt";\n        public ExternalDBApplicationResult OnStartup(ControlledApplication application)\n        {\n            DesignAutomationBridge.DesignAutomationReadyEvent += HandleDesignAutomationReadyEvent;\n            return ExternalDBApplicationResult.Succeeded;\n        }\n        private void HandleDesignAutomationReadyEvent(object sender, DesignAutomationReadyEventArgs e)\n        {\n            LogTrace("Design Automation Ready event triggered...");\n            e.Succeeded = true;\n            EditWindowParametersMethod(e.DesignAutomationData.RevitDoc);\n        }\n        private void EditWindowParametersMethod(Document doc)\n        {\n            InputParams inputParameters = JsonConvert.DeserializeObject<InputParams>(File.ReadAllText("params.json"));\n            //Modifying the window parameters\n            //Open transaction\n            using (Transaction trans = new Transaction(doc))\n            {\n                trans.Start("Update window parameters");\n                //Filter for windows\n                FilteredElementCollector WindowCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Windows).WhereElementIsNotElementType();\n                IList<ElementId> windowIds = WindowCollector.ToElementIds() as IList<ElementId>;\n                foreach (ElementId windowId in windowIds)\n                {\n                    Element Window = doc.GetElement(windowId);\n                    FamilyInstance FamInst = Window as FamilyInstance;\n                    FamilySymbol FamSym = FamInst.Symbol;\n                    SetElementParameter(FamSym, BuiltInParameter.WINDOW_HEIGHT, inputParameters.Height);\n                    SetElementParameter(FamSym, BuiltInParameter.WINDOW_WIDTH, inputParameters.Width);\n                }\n                //To save all the changes commit the transaction\n                trans.Commit();\n            }\n            //Save the updated file by overwriting the existing file\n            ModelPath ProjectModelPath = ModelPathUtils.ConvertUserVisiblePathToModelPath(OUTPUT_FILE);\n            SaveAsOptions SAO = new SaveAsOptions();\n            SAO.OverwriteExistingFile = true;\n            //Save the project file with updated window\'s parameters\n            LogTrace("Saving file...");\n            doc.SaveAs(ProjectModelPath, SAO);\n        }\n        public ExternalDBApplicationResult OnShutdown(ControlledApplication application)\n        {\n            return ExternalDBApplicationResult.Succeeded;\n        }\n        private void SetElementParameter(FamilySymbol FamSym, BuiltInParameter paraMeter, double parameterValue)\n        {\n            FamSym.get_Parameter(paraMeter).Set(parameterValue);\n        }\n        public class InputParams\n        {\n            public double Width { get; set; }\n            public double Height { get; set; }\n        }\n        /// <summary>\n        /// This will appear on the Design Automation output\n        /// </summary>\n        private static void LogTrace(string format, params object[] args) { System.Console.WriteLine(format, args); }\n    }\n}\n')),(0,r.kt)("p",null,"Crie uma pasta chamada UpdateRVTParam.bundle e, dentro, um arquivo chamado PackageContents.xml e, em seguida, copie o seguinte conte\xfado para ele. Saiba mais em PackageContents.xml Refer\xeancia de formato. Este arquivo diz ao Revit para carregar nosso plugin .addin."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:"title=PackageContents.xml",title:"PackageContents.xml"},'<?xml version="1.0" encoding="utf-8" ?>\n<ApplicationPackage Name="RevitDesignAutomation" Description="Sample Plugin for Revit" Author="tutorials.autodesk.io">\n  <CompanyDetails Name="Autodesk, Inc" Url="http://tutorials.autodesk.io" Email="forge.help@autodesk.com"/>\n  <Components Description="Modify window parameters">\n    <RuntimeRequirements SeriesMax="R2021" SeriesMin="R2019" Platform="Revit" OS="Win64"/>\n    <ComponentEntry LoadOnRevitStartup="True" LoadOnCommandInvocation="False" AppDescription="Modify Window Parameters" ModuleName="./Contents/Autodesk.Forge.Sample.DesignAutomation.Revit.addin" Version="1.0.0" AppName="Modify Window Parameters"/>\n  </Components>\n</ApplicationPackage>\n')),(0,r.kt)("h4",{id:"autodeskforgesampledesignautomationrevitaddin"},"Autodesk.Forge.Sample.DesignAutomation.Revit.addin"),(0,r.kt)("p",null,"Na pasta 'UpdateRVTParam.bundle', crie uma subpasta chamada 'Contents' e, dentro dessa pasta, um novo arquivo chamado 'Autodesk.Forge.Sample.DesignAutomation.Revit.addin'. Isso informa ao Revit como carregar o plugin."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="utf-8" standalone="no"?>\n<RevitAddIns>\n  <AddIn Type="DBApplication">\n    <Name>Modify Window Parameters</Name>\n    <FullClassName>Autodesk.Forge.Sample.DesignAutomation.Revit.Commands</FullClassName>\n    <Text>Revit for Design Automation</Text>\n    <Description>Revit for Design Automation</Description>\n    <VisibilityMode>AlwaysVisible</VisibilityMode>\n    <Assembly>.\\UpdateRVTParam.dll</Assembly>\n    <AddInId>000BD853-36E4-461f-9171-C5ACEDA4E723</AddInId>\n    <VendorId>ADSK</VendorId>\n    <VendorDescription>Autodesk, Inc, www.autodesk.com</VendorDescription>\n  </AddIn>\n</RevitAddIns>\n')),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(3861).Z,width:"596",height:"245"})),(0,r.kt)("h4",{id:"evento-p\xf3s-compila\xe7\xe3o"},"Evento p\xf3s-compila\xe7\xe3o"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Para Node.js \xe9 necess\xe1rio ajustar a pasta de sa\xedda ZIP do AppBundle.")),(0,r.kt)("p",null,"Agora precisamos ZIP a pasta .bundle. Clique com o bot\xe3o direito do mouse no projeto, selecione ",(0,r.kt)("strong",{parentName:"p"},"Propriedades"),", abra ",(0,r.kt)("strong",{parentName:"p"},"Eventos de compila\xe7\xe3o")," e copie o seguinte para o campo ",(0,r.kt)("strong",{parentName:"p"},"Linha de comando de evento p\xf3s-compila\xe7\xe3o"),", conforme mostrado na imagem abaixo."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'xcopy /Y /F "$(TargetDir)*.dll" "$(ProjectDir)UpdateRVTParam.bundle\\Contents\\"\ndel /F "$(ProjectDir)..\\designAutomationSample\\wwwroot\\bundles\\UpdateRVTParam.zip"\n"C:\\Program Files\\7-Zip\\7z.exe" a -tzip "$(ProjectDir)../designAutomationSample/wwwroot/bundles/UpdateRVTParam.zip" "$(ProjectDir)UpdateRVTParam.bundle\\" -xr0!*.pdb\n')),(0,r.kt)("p",null,"Isso copiar\xe1 a DLL de '/bin/debug/' para a pasta '.bundle/Contents', depois usar\xe1 ",(0,r.kt)("a",{parentName:"p",href:"https://www.7-zip.org/"},"7zip")," para criar um zip e, finalmente, copiar\xe1 o ZIP para as pastas '/bundles' do webapp."),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(6339).Z,width:"720",height:"465"})),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Observe como o evento ",(0,r.kt)("strong",{parentName:"p"},"Post-build")," usa os nomes de projeto e pasta, portanto, verifique se voc\xea est\xe1 usando esses nomes.")),(0,r.kt)("p",null,"Se voc\xea construir o projeto 'UpdateRVTParam' agora voc\xea deve ver algo assim na janela ",(0,r.kt)("strong",{parentName:"p"},"Output"),". Observe as 2 pastas e 3 arquivos zipados. O arquivo zip \xe9 criado diretamente na pasta /wwwroot/bundles. Isso significa que voc\xea est\xe1 indo muito bem!"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(5368).Z,width:"1035",height:"368"})),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Se a sa\xedda da compila\xe7\xe3o mostrar mais de ",(0,r.kt)("strong",{parentName:"p"},"2 pastas, 5 arquivos")," copiados, volte e verifique se a refer\xeancia ",(0,r.kt)("strong",{parentName:"p"},"RevitAPI")," est\xe1 definida como ",(0,r.kt)("strong",{parentName:"p"},"Copy Local"),":",(0,r.kt)("strong",{parentName:"p"},"False"),". Talvez seja necess\xe1rio remover todas as DLLs da pasta 'UpdateRVTParam.bundle/Contents/'")))}h.isMDXComponent=!0;const v={toc:[{value:"Criar um novo projeto .NET",id:"criar-um-novo-projeto-net",level:3},{value:"Evento p\xf3s-compila\xe7\xe3o",id:"evento-p\xf3s-compila\xe7\xe3o",level:2}]};function b(e){let{components:n,...o}=e;return(0,r.kt)("wrapper",(0,t.Z)({},v,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Esta etapa ir\xe1 ajud\xe1-lo a criar um plugin b\xe1sico do 3ds Max para Design Automation. Todo o tutorial usa o Microsoft .NET Framework, incluindo o plug-in para o 3ds Max. Observe que o 3ds Max pode ser automatizado pelo MAXScript, Python, NET API e C++. A API .NET do 3ds Max provavelmente n\xe3o \xe9 a mais usada para plugins, no entanto, para outros produtos Design Automatiuon \xe9 a API t\xedpica. Os recursos do 3ds Max para a API do .NET podem ser encontrados aqui (links do 2019, mas a API do .NET tem suporte para todas as vers\xf5es dispon\xedveis dos mecanismos do 3ds Max Design Automation):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://help.autodesk.com/view/3DSMAX/2019/ENU/?guid=__developer_3ds_max_sdk___the_learning_path_lesson_7_writing__net_plug_ins_html"},"Escrevendo plugins 3ds Max .NET")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://help.autodesk.com/view/3DSMAX/2019/ENU/?guid=__developer_3ds_max__net_sdk_html"},"O SDK do .NET do 3ds Max")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://getcoreinterface.typepad.com/blog/2017/10/updated-net-api-samples-for-3ds-max-2018.html"},"GetCOREInterface Blog .NET Exemplos"))),(0,r.kt)("p",null,"Lembre-se de que, para a Automa\xe7\xe3o de Design, n\xe3o deve haver interface do usu\xe1rio ou prompts que n\xe3o possam ser automatizados. Para automatizar o mecanismo 3ds Max DA, voc\xea deve fornecer alguns MAXScript. Isso geralmente \xe9 muito f\xe1cil, pois a maioria das personaliza\xe7\xf5es pode ser exposta rapidamente ao MAXScript (consulte ",(0,r.kt)("a",{parentName:"p",href:"http://help.autodesk.com/view/3DSMAX/2019/ENU/?guid=__developer_3ds_max_sdk_features_function_publishing_html"},"publica\xe7\xe3o de fun\xe7\xe3o para C++")," e ",(0,r.kt)("a",{parentName:"p",href:"http://help.autodesk.com/view/3DSMAX/2019/ENU/?guid=GUID-779FD7AC-953D-4567-B2A8-60B1D8695B95"},"manipula\xe7\xe3o do MAXScript .NET"),")"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Voc\xea pode ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/autodesk-platform-services/aps-design-automation-nodejs/tree/nodejs/bundles/UpdateMAXParam.zip"},"baixar o Bundle ZIP")," na pasta 'bundles/' (Node.js) ou '/designAutomationSample/wwwroot/bundles' (.NET 6) e ",(0,r.kt)("a",{parentName:"p",href:"#upload-plugin-bundle"},"pular para a se\xe7\xe3o ",(0,r.kt)("strong",{parentName:"a"},"Upload Plugin Bundle")),".")),(0,r.kt)("h3",{id:"criar-um-novo-projeto-net"},"Criar um novo projeto .NET"),(0,r.kt)("p",null,"Clique com o bot\xe3o direito do mouse na solu\xe7\xe3o, em ",(0,r.kt)("strong",{parentName:"p"},"Adicionar")," >> em ",(0,r.kt)("strong",{parentName:"p"},"Novo Projeto"),". Selecione ",(0,r.kt)("strong",{parentName:"p"},"Windows Desktop"),", depois ",(0,r.kt)("strong",{parentName:"p"},"Class Library")," e, finalmente, nomeie-o como 'UpdateMAXParam'. Em seguida, voc\xea precisar\xe1 fazer refer\xeancia ao assembly gerenciado 'Autodesk.Max.Dll' (m\xf3dulo principal da API do 3ds Max .NET). Este m\xf3dulo \xe9 encontrado na pasta '3dsmax.exe' e, ao referenciar, certifique-se de desativar o sinalizador \"Copy Local\". H\xe1 alguns outros m\xf3dulos usados para suporte \xe0 API do .NET (consulte ",(0,r.kt)("a",{parentName:"p",href:"http://help.autodesk.com/view/3DSMAX/2019/ENU/?guid=__developer_3ds_max__net_sdk_html"},"The 3ds Max .NET SDK"),"), mas para este tutorial usaremos apenas Autodesk.Max.dll. Em seguida, pesquise e instale 'Newtonsoft.Json' (que \xe9 usado para analisar dados de entrada no formato JSON)."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Selecione .NET Framework 4.8. Se n\xe3o estiver listado, ",(0,r.kt)("a",{parentName:"p",href:"https://dotnet.microsoft.com/download/dotnet-framework/net48"},"instale o Dev Pack"),".")),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(392).Z,width:"800",height:"450"})),(0,r.kt)("p",null,"Como resultado, o ",(0,r.kt)("strong",{parentName:"p"},"package.config")," deve se parecer com o seguinte para o m\xf3dulo Newtonsoft.Json."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:"title=package.config",title:"package.config"},'<?xml version="1.0" encoding="utf-8"?>\n<packages>\n    <package id="Newtonsoft.Json" version="12.0.1" targetFramework="net47" />\n</packages>\n')),(0,r.kt)("p",null,"Este \xe9 o c\xf3digo principal que ser\xe1 executado com o 3ds Max. Copie o seguinte conte\xfado para 'Command.cs'. H\xe1 tr\xeas classes para lidar com o porcessing de Automa\xe7\xe3o de Projeto. O primeiro \xe9 o 'InputParams' que ser\xe1 usado para fazer a interface com os dados de entrada JSON. O pr\xf3ximo \xe9 a classe 'ParameterChanger' que \xe9 usada para iterar a cena e localizar todas as janelas de casement (mas pode ser qualquer tipo de objeto identificado pelos ids de classe). Finalmente, o 'RuntimeExecute' \xe9 usado para receber a entrada e conduzir a automa\xe7\xe3o. Observe tamb\xe9m que h\xe1 um log especializado que enviar\xe1 informa\xe7\xf5es para o console do Design Automation. Consulte a fun\xe7\xe3o LogTrace. Observe que a classe gerenciada 'ILogSys' 3ds Max \xe9 usada para isso, e os sinalizadores usados com a API 'LogEntry' indicada s\xe3o necess\xe1rios para que a sa\xedda seja exibida no console do Design Automation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs",metastring:"title=Commands.cs",title:"Commands.cs"},'using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.IO;\nusing Newtonsoft.Json;\nusing Autodesk.Max;\nnamespace Autodesk.Forge.Sample.DesignAutomation.Max\n{\n    /// <summary>\n    /// Used to hold the parameters to change\n    /// </summary>\n    public class InputParams\n    {\n        public float Width { get; set; }\n        public float Height { get; set; }\n    }\n    /// <summary>\n    /// Changes parameters in automated way.\n    /// Iterate entire scene to get all nodes\n    /// In this example we specifically find Casement Windows by object class ID\n    /// Then modify the width and height based on inputs.\n    ///\n    /// Could be expanded to find other window types, other objects, etc.\n    /// </summary>\n    static public class ParameterChanger\n    {\n        static List<IINode> m_sceneNodes = new List<IINode> { };\n        /// <summary>\n        /// Recursively go through the scene and get all nodes\n        /// Use the Autodesk.Max APIs to get the children nodes\n        /// </summary>\n        static private void GetSceneNodes(IINode node)\n        {\n            m_sceneNodes.Add(node);\n            for (int i = 0; i < node.NumberOfChildren; i++)\n                GetSceneNodes(node.GetChildNode(i));\n        }\n        /// <summary>\n        /// Function to specifically update Case Windows with input wedth and height parameters\n        /// </summary>\n        /// <param name="width">The new Width to set the Window</param>\n        /// <param name="height">The new Height to set the Window</param>\n        /// <returns>window count</returns>\n        static public int UpdateWindowNodes(float width, float height)\n        {\n            IGlobal globalInterface = Autodesk.Max.GlobalInterface.Instance;\n            IInterface14 coreInterface = globalInterface.COREInterface14;\n            IINode nodeRoot = coreInterface.RootNode;\n            m_sceneNodes.Clear();\n            GetSceneNodes(nodeRoot);\n            // 3ds Max uses a class ID for all object types. This is easiest way to find specific type.\n            // ClassID (1902665597L, 1593788199L) == 0x71685F7D, 0x5EFF4727 for casement window\n            IClass_ID cidCasementWindow = globalInterface.Class_ID.Create(0x71685F7D, 0x5EFF4727);\n            // Use LINQ to filter for windows only - in case scene has more than one,\n            // but this should still give us at least one for single window scene!\n            var sceneWindows = from node in m_sceneNodes\n                               where ((node.ObjectRef != null) && // In some cases the ObjectRef can be null for certain node types.\n                                      (node.ObjectRef.ClassID.PartA == cidCasementWindow.PartA) &&\n                                      (node.ObjectRef.ClassID.PartB == cidCasementWindow.PartB))\n                               select node;\n            // Iterate the casement windws and update the hight and width parameters.\n            foreach (IINode item in sceneWindows)\n            {\n                // window is using old-style ParamArray rather than newer ParamBlk2\n                IIParamArray pb = item.ObjectRef.ParamBlock;\n                pb.SetValue(0, coreInterface.Time, height); // window height is at index zero.\n                pb.SetValue(1, coreInterface.Time, width); // window width is at index one.\n            }\n            // If there are windows, save the window updates\n            int status;\n            if (sceneWindows.Count() > 0)\n            {\n                // The output file name must match what the Design Automation work item is specifying as output file.\n                string full_filename = coreInterface.CurFilePath;\n                string filename = coreInterface.CurFileName;\n                string new_filename = full_filename.Replace(filename, "outputFile.max");\n                status = coreInterface.SaveToFile(new_filename, true, false);\n                if (status == 0) //error\n                    return -1;\n            }\n            // return how many windows were modified.\n            return sceneWindows.Count();\n        }\n    }\n    /// <summary>\n    /// This class is used to execute the automation. Above class could be connected to UI elements, or run by scripts directly.\n    /// This class takes the input from JSON input and uses those values. This way it is more cohesive to web development.\n    /// </summary>\n    static public class RuntimeExecute\n    {\n        static public int ModifyWindowWidthHeight()\n        {\n            int count = 0;\n            // Run entire code block with try/catch to help determine errors\n            try\n            {\n                // read input parameters from JSON file\n                InputParams inputParams = JsonConvert.DeserializeObject<InputParams>(File.ReadAllText("params.json"));\n                count = ParameterChanger.UpdateWindowNodes(inputParams.Width, inputParams.Height);\n            }\n            catch (Exception e)\n            {\n                LogTrace("Exception Error: " + e.Message);\n                return -1; //fail\n            }\n            LogTrace("Changed {0} Window objects.", count);\n            return count; // 0+ means success, and how many objects were changed.\n        }\n        /// <summary>\n        /// Information sent to this LogTrace will appear on the Design Automation output\n        /// </summary>\n        private static void LogTrace(string format, params object[] args)\n        {\n            System.Reflection.Assembly a = System.Reflection.Assembly.GetExecutingAssembly();\n            string output_msg = string.Format("DLL {0} compiled on {1}; {2}",\n                System.IO.Path.GetFileName(a.Location),\n                File.GetLastWriteTime(a.Location),\n                string.Format(format, args));\n            IGlobal globalInterface = Autodesk.Max.GlobalInterface.Instance;\n            IInterface14 coreInterface = globalInterface.COREInterface14;\n            ILogSys log = coreInterface.Log;\n            // Note flags are necessary to produce Design Automation output. This is same as C++:\n            // SYSLOG_INFO | SYSLOG_IGNORE_VERBOSITY | SYSLOG_BROADCAST\n            log.LogEntry(0x00000004 | 0x00040000 | 0x00010000, false, "", output_msg);\n        }\n    }\n}\n')),(0,r.kt)("p",null,"Crie uma pasta chamada 'UpdateMAXParam.bundle' e dentro desta pasta adicione um arquivo chamado 'PackageContents.xml'. Copie o conte\xfado listado abaixo na se\xe7\xe3o XML para o arquivo PackageContents.xml. Saiba mais em ",(0,r.kt)("a",{parentName:"p",href:"https://help.autodesk.com/view/ACD/2023/ENU/?guid=GUID-BC76355D-682B-46ED-B9B7-66C95EEF2BD0"},"PackageContents.xml Format Reference"),". Para obter mais informa\xe7\xf5es espec\xedficas do 3ds Max para empacotar seus plug-ins do 3ds Max, consulte aqui ",(0,r.kt)("a",{parentName:"p",href:"http://help.autodesk.com/view/3DSMAX/2019/ENU/?guid=__developer_writing_plug_ins_packaging_plugins_html"},"Plug-ins de empacotamento")),(0,r.kt)("p",null,"Esse arquivo informar\xe1 ao 3ds Max os m\xf3dulos a serem carregados (neste caso, o assembly de plug-in da API .NET que estamos criando, mas tamb\xe9m pode incluir plug-ins MAXScripts, Python e/ou C++.) Como o plugin est\xe1 sendo carregado atrav\xe9s desse recurso, voc\xea s\xf3 precisa se preocupar com as instru\xe7\xf5es para acionar seu trabalho de automa\xe7\xe3o. Observe que um ID exclusivo para ProductCode e UpgradeCode \xe9 necess\xe1rio para que o 3ds Max carregue corretamente seu c\xf3digo. Consulte a documenta\xe7\xe3o acima mencionada para obter detalhes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:"tilte=PackageContents.xml",tilte:"PackageContents.xml"},'<?xml version="1.0" encoding="utf-8"?>\n<ApplicationPackage\n    SchemaVersion="1.0"\n    AutodeskProduct="3ds Max"\n    Name="Sample Design Automation Plugin for 3ds Max"\n    Description="A sample package to update parameters of a 3ds Max scene file containing a casement window"\n    AppVersion="2019.0.0"\n    FriendlyVersion="2019.0.0"\n    ProductType="Application"\n    SupportedLocales="Enu"\n    AppNameSpace="apps.autodesk.com"\n    Author="Autodesk Forge"\n    ProductCode="{6A8D06F4-C3DD-42DD-A69E-9B9617A7ABC0}"\n    UpgradeCode="{CE88CEA5-47F6-423E-B9EC-E9FA683B5228}"\n    >\n    <CompanyDetails Name="Autodesk"\n        Phone=" "\n        Url="http://forge.autodesk.com"\n        Email="noreply@autodesk.com" />\n    <RuntimeRequirements OS="Win64" Platform="3ds Max" SeriesMin="2019" SeriesMax="2021" />\n    <Components Description="assemblies parts">\n        <RuntimeRequirements OS="Win64" Platform="3ds Max" SeriesMin="2019" SeriesMax="2021" />\n        <ComponentEntry AppName="UpdateMAXParam" Version="2019.0.0" ModuleName="./Contents/UpdateMAXParam.dll" AppDescription="The Sample Design Automation Plugin managed assembly module" />\n    </Components>\n</ApplicationPackage>\n')),(0,r.kt)("p",null,"Finally, create a subfolder named ",(0,r.kt)("inlineCode",{parentName:"p"},"Contents")," and leave it empty. At this point, the project should look like.\n",(0,r.kt)("img",{src:a(6487).Z,width:"305",height:"182"})),(0,r.kt)("h2",{id:"evento-p\xf3s-compila\xe7\xe3o"},"Evento p\xf3s-compila\xe7\xe3o"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Para Node.js \xe9 necess\xe1rio ajustar a pasta de sa\xedda ZIP do AppBundle.")),(0,r.kt)("p",null,"Agora precisamos ZIP a pasta '.bundle'. Clique com o bot\xe3o direito do mouse no projeto, selecione ",(0,r.kt)("strong",{parentName:"p"},"Propriedades"),", abra ",(0,r.kt)("strong",{parentName:"p"},"Eventos de compila\xe7\xe3o")," e copie o seguinte para o campo ",(0,r.kt)("strong",{parentName:"p"},"Linha de comando de evento p\xf3s-compila\xe7\xe3o"),", conforme mostrado na imagem abaixo."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'xcopy /Y /F "$(TargetDir)*.dll" "$(ProjectDir)UpdateMAXParam.bundle\\Contents\\"\ndel /F "$(ProjectDir)..\\designAutomationSample\\wwwroot\\bundles\\UpdateMAXParam.zip"\n"C:\\Program Files\\7-Zip\\7z.exe" a -tzip "$(ProjectDir)../designAutomationSample/wwwroot/bundles/UpdateMAXParam.zip" "$(ProjectDir)UpdateMAXParam.bundle\\" -xr0!*.pdb\n')),(0,r.kt)("p",null,"Isso copiar\xe1 a DLL de '/bin/debug/' para a pasta '.bundle/Contents', depois usar\xe1 ",(0,r.kt)("a",{parentName:"p",href:"https://www.7-zip.org/"},"7zip")," para criar um zip e, finalmente, copiar\xe1 o ZIP para as pastas /bundles do webapp."),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(7477).Z,width:"838",height:"606"})),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Observe como o evento ",(0,r.kt)("strong",{parentName:"p"},"Post-build")," usa os nomes de projeto e pasta, portanto, verifique se voc\xea est\xe1 usando esses nomes.")),(0,r.kt)("p",null,"Se voc\xea criar o projeto 'UpdateMAXParam' agora, voc\xea deve ver algo como abaixo na janela ",(0,r.kt)("strong",{parentName:"p"},"Output"),". Note que 2 pastas e 3 arquivos zipados. O arquivo zip \xe9 criado diretamente na pasta /wwwroot/bundles. Isso significa que voc\xea est\xe1 indo muito bem!"),(0,r.kt)("p",null,(0,r.kt)("img",{src:a(7268).Z,width:"1161",height:"487"})),(0,r.kt)("p",null,"Neste ponto, voc\xea pode testar a funcionalidade usando a ferramenta de lote 3ds Max. Ele funciona de forma semelhante ao mecanismo 3ds Max Design Automation e \xe9 uma boa maneira de testar toda a sua automa\xe7\xe3o localmente antes de enviar o trabalho para os servi\xe7os de nuvem do Forge DA. Para que as classes .NET sejam instanciadas no ambiente MAXScript, podemos usar a fun\xe7\xe3o MAXScript 'dotNetClass'. Para este projeto de exemplo, o c\xf3digo MAXScript teria a seguinte apar\xeancia:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ms",metastring:"title=MAXScript",title:"MAXScript"},'fn UpdateParam =\n(\n    da = dotNetClass("Autodesk.Forge.Sample.DesignAutomation.Max.RuntimeExecute")\n    da.ModifyWindowWidthHeight()\n)\nUpdateParam()\n')),(0,r.kt)("p",null,"Para executar isso localmente, poder\xedamos testar um prompt de linha de comando com algo assim:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-CommandLine"},'"%ADSK_3DSMAX_x64_2019%\\3dsmaxbatch.exe" -sceneFile <myTestScene>.max da_script.ms\n')),(0,r.kt)("p",null,"Mais adiante neste tutorial, voc\xea ver\xe1 essas mesmas instru\xe7\xf5es sendo enviadas para o mecanismo 3ds Max Design Automation."))}b.isMDXComponent=!0;var A=a(3992),w=a(425);function y(e){let{AutoCAD:n,Inventor:a,Revit:t,Max:r}=e;return o.createElement(A.Z,{groupId:"Engine"},o.createElement(w.Z,{value:"AutoCAD",label:"AutoCAD Plugin",default:!0},o.createElement(n,null)),o.createElement(w.Z,{value:"Inventor",label:"Inventor Plugin"},o.createElement(a,null)),o.createElement(w.Z,{value:"Revit",label:"Revit Plugin"},o.createElement(t,null)),o.createElement(w.Z,{value:"Max",label:"3ds Max Plugin"},o.createElement(r,null)))}var N=a(415);const P={},C="Criar Plugin",D={unversionedId:"tutorials/design-automation/prepare-plugin",id:"tutorials/design-automation/prepare-plugin",title:"Criar Plugin",description:"O Design Automation usa '.bundle' exatamente como a Autodesk App Store, o que significa que voc\xea precisa criar um PackageContents.xml e um ZIP com a DLL (e outros arquivos necess\xe1rios). Para obter informa\xe7\xf5es detalhadas sobre como cri\xe1-los, visite Autodesk App Store Developer Center.",source:"@site/i18n/pt/docusaurus-plugin-content-docs/current/03-tutorials/04-design-automation/02-prepare-plugin.mdx",sourceDirName:"03-tutorials/04-design-automation",slug:"/tutorials/design-automation/prepare-plugin",permalink:"/pt/tutorials/design-automation/prepare-plugin",draft:!1,editUrl:"https://github.com/autodesk-platform-services/aps-tutorials-website/edit/master/docs/03-tutorials/04-design-automation/02-prepare-plugin.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Interface do usu\xe1rio b\xe1sica",permalink:"/pt/tutorials/design-automation/basic-app-ui"},next:{title:"Definir Atividade",permalink:"/pt/tutorials/design-automation/define-activity"}},I={},S=[{value:"Pr\xe9-requisitos",id:"pr\xe9-requisitos",level:3},{value:"Pr\xe9-requisitos adicionais",id:"pr\xe9-requisitos-adicionais",level:3},{value:"Escolha o motor",id:"escolha-o-motor",level:3},{value:"Carregar Pacote de Plugins",id:"carregar-pacote-de-plugins",level:3}],x={toc:S};function E(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,t.Z)({},x,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"criar-plugin"},"Criar Plugin"),(0,r.kt)("p",null,"O Design Automation usa '.bundle' exatamente como a ",(0,r.kt)("a",{parentName:"p",href:"https://www.autodesk.com/developer-network/app-store"},"Autodesk App Store"),", o que significa que voc\xea precisa criar um PackageContents.xml e um ZIP com a DLL (e outros arquivos necess\xe1rios). Para obter informa\xe7\xf5es detalhadas sobre como cri\xe1-los, visite Autodesk App Store Developer Center."),(0,r.kt)("p",null,"Nesta se\xe7\xe3o, criaremos um plugin b\xe1sico que atualizar\xe1 o par\xe2metro width e height e salvar\xe1 o arquivo resultante. Tamb\xe9m os arquivos de suporte (PackageContents.xml) e a estrutura de pastas para coloc\xe1-los. Finalmente, crie um arquivo .ZIP pronto para carregar no Design Automation."),(0,r.kt)("p",null,"Na pasta raiz, crie uma pasta 'bundles'."),(0,r.kt)("img",{src:i,style:{width:300}}),(0,r.kt)("h3",{id:"pr\xe9-requisitos"},"Pr\xe9-requisitos"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"7zip: use para criar o .ZIP com arquivos bundle, instale a partir daqui. Este tutorial pressup\xf5e que o 7zip est\xe1 instalado na pasta padr\xe3o: 'C:\\Arquivos de Programas\\7-Zip\\7z.exe'.")),(0,r.kt)("h3",{id:"pr\xe9-requisitos-adicionais"},"Pr\xe9-requisitos adicionais"),(0,r.kt)("p",null,"Para a pr\xf3xima sess\xe3o, voc\xea pode usar o plugin de pr\xe9-compila\xe7\xe3o. Ou se voc\xea decidir constru\xed-lo, voc\xea precisar\xe1"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Visual Studio"),": Visual Studio 2019 ou mais recente \xe9 necess\xe1rio, visite ",(0,r.kt)("a",{parentName:"p",href:"https://visualstudio.microsoft.com/vs/"},"este link"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"AutoCAD, Inventor, Revit ou 3ds Max"),": Para desenvolver, testar e depurar seu plugin Design Automation: ",(0,r.kt)("a",{parentName:"p",href:"https://www.autodesk.com/products/autocad/overview"},"AutoCAD")," | ","[Inventor]"," (",(0,r.kt)("a",{parentName:"p",href:"https://www.autodesk.com/products/inventor/overview"},"https://www.autodesk.com/products/inventor/overview"),") | ","[Revit]"," (",(0,r.kt)("a",{parentName:"p",href:"https://www.autodesk.com/products/revit/overview"},"https://www.autodesk.com/products/revit/overview"),") | ","[3ds Max]"," (",(0,r.kt)("a",{parentName:"p",href:"https://www.autodesk.com/products/3ds-max/overview"},"https://www.autodesk.com/products/3ds-max/overview"),")."))),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Para a pr\xf3xima etapa, escolha o ",(0,r.kt)("strong",{parentName:"p"},"Engine"),", que \xe9 o aplicativo da Autodesk onde o plug-in ser\xe1 executado. Voc\xea precisar\xe1 do respectivo aplicativo instalado para compilar, depurar e testar localmente."),(0,r.kt)("h3",{id:"escolha-o-motor"},"Escolha o motor"),(0,r.kt)(y,{AutoCAD:m,Inventor:f,Revit:h,Max:b,mdxType:"EngineTabs"}),(0,r.kt)("h3",{id:"carregar-pacote-de-plugins"},"Carregar Pacote de Plugins"),(0,r.kt)("p",null,"Agora que o pacote ZIP est\xe1 pronto, vamos fazer o upload para o Design Automation."),(0,r.kt)(N.Z,{NodeJsVsCode:d,DotNetVsCode:p,DotNetVs2022:p,mdxType:"EnvTabs"}),(0,r.kt)("p",null,"Se voc\xea executar o webapp agora e clicar em Configurar (canto superior direito), ver\xe1 seu AppBundle e uma lista de todos os mecanismos dispon\xedveis. Os bot\xf5es ainda n\xe3o funcionam... vamos em frente."),(0,r.kt)("img",{src:s,style:{width:800}}))}E.isMDXComponent=!0},4848:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/build_output-10a18ff1b3a1541fe9b605c395d829de.png"},7417:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/new_project-771d367c45c5925c918a5527d52e9f66.gif"},3090:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/post_build-a012eca48cd7e44080637645cddf84ad.png"},5984:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/build_output-bf11b609b2d0a6cf727ce6c8ec88ea41.png"},5974:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/da4inventor_template-14afc275e0650d02493c9e5bfba2a8b0.png"},9380:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/new_project-cb082861bc173a90a68ea2cb274c34ba.gif"},6757:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/post_build-070bf4c2d852047c6150096ee7ffa88d.png"},7268:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/build_output-ce05b3d8c88cc7affc86a1147d020dd5.png"},6487:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/bundle_folders-1efac7014e397b3ca1bce82d8ae49ed7.png"},392:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/new_project-1d9f467db68bac64c1888ccbca7bd1f5.gif"},7477:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/post_build-a9eadc1ec0a019f8d98dd73be3e2269f.png"},5368:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/build_output-8de45776d215b42ba0e40ac2726bd7df.png"},3861:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/bundle_folders-5bf11d65269f3485ba88938354f568d3.png"},4853:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/new_project-403a842ad8e357cf40a50b6362ec12ab.gif"},6339:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/post_build-7dafce9f0bdcc4dbb35cc5f5b051bdfa.png"},3494:(e,n,a)=>{a.d(n,{Z:()=>t});const t=a.p+"assets/images/project_files-cb15f945a431aaf66d1c53762dc89290.png"}}]);