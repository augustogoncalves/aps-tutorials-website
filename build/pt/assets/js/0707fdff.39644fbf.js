"use strict";(self.webpackChunkaps_tutorials_website=self.webpackChunkaps_tutorials_website||[]).push([[282],{4137:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>c});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),d=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},h=function(e){var t=d(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,h=i(e,["components","mdxType","originalType","parentName"]),p=d(n),c=r,m=p["".concat(l,".").concat(c)]||p[c]||u[c]||s;return n?o.createElement(m,a(a({ref:t},h),{},{components:n})):o.createElement(m,a({ref:t},h))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,a=new Array(s);a[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var d=2;d<s;d++)a[d]=n[d];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8154:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var o=n(7462),r=(n(7294),n(4137));const s={},a="Gr\xe1ficos de Histograma",i={unversionedId:"tutorials/dashboard/charts",id:"tutorials/dashboard/charts",title:"Gr\xe1ficos de Histograma",description:"Nesta etapa, criaremos uma extens\xe3o de visualizador que exibir\xe1 um histograma",source:"@site/i18n/pt/docusaurus-plugin-content-docs/current/03-tutorials/03-dashboard/03-charts.mdx",sourceDirName:"03-tutorials/03-dashboard",slug:"/tutorials/dashboard/charts",permalink:"/pt/tutorials/dashboard/charts",draft:!1,editUrl:"https://github.com/autodesk-platform-services/aps-tutorials-website/edit/master/docs/03-tutorials/03-dashboard/03-charts.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Resumo do Modelo",permalink:"/pt/tutorials/dashboard/panel"},next:{title:"Grade de Dados",permalink:"/pt/tutorials/dashboard/grid"}},l={},d=[{value:"Esqueleto de extens\xe3o",id:"esqueleto-de-extens\xe3o",level:2},{value:"Barra de ferramentas",id:"barra-de-ferramentas",level:2},{value:"Carregamento de depend\xeancia",id:"carregamento-de-depend\xeancia",level:2},{value:"Paradas",id:"paradas",level:2},{value:"Experimente",id:"experimente",level:2}],h={toc:d};function u(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,o.Z)({},h,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"gr\xe1ficos-de-histograma"},"Gr\xe1ficos de Histograma"),(0,r.kt)("p",null,"Nesta etapa, criaremos uma extens\xe3o de visualizador que exibir\xe1 um histograma\nde valores para uma propriedade espec\xedfica em todos os elementos de design. Utilizaremos o\nBiblioteca de c\xf3digo aberto ",(0,r.kt)("a",{parentName:"p",href:"https://www.chartjs.org"},"Chart.js")," para exibir os histogramas\ncomo gr\xe1ficos de barras e gr\xe1ficos de pizza."),(0,r.kt)("h2",{id:"esqueleto-de-extens\xe3o"},"Esqueleto de extens\xe3o"),(0,r.kt)("p",null,"Assim como nas etapas anteriores, vamos criar um novo arquivo na subpasta 'extens\xf5es',\nchame-o de 'HistogramExtension.js' e preencha-o com o seguinte c\xf3digo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/extensions/HistogramExtension.js"',title:'"wwwroot/extensions/HistogramExtension.js"'},"import { BaseExtension } from './BaseExtension.js';\nclass HistogramExtension extends BaseExtension {\n    constructor(viewer, options) {\n        super(viewer, options);\n    }\n    async load() {\n        super.load();\n        console.log('HistogramExtension loaded.');\n        return true;\n    }\n    unload() {\n        super.unload();\n        console.log('HistogramExtension unloaded.');\n        return true;\n    }\n    async findPropertyValueOccurrences(model, propertyName) {\n        const dbids = await this.findLeafNodes(model);\n        return new Promise(function (resolve, reject) {\n            model.getBulkProperties(dbids, { propFilter: [propertyName] }, function (results) {\n                let histogram = new Map();\n                for (const result of results) {\n                    if (result.properties.length > 0) {\n                        const key = result.properties[0].displayValue;\n                        if (histogram.has(key)) {\n                            histogram.get(key).push(result.dbId);\n                        } else {\n                            histogram.set(key, [result.dbId]);\n                        }\n                    }\n                }\n                resolve(histogram);\n            }, reject);\n        });\n    }\n}\nAutodesk.Viewing.theExtensionManager.registerExtension('HistogramExtension', HistogramExtension);\n")),(0,r.kt)("p",null,"Al\xe9m do andaime de extens\xe3o padr\xe3o, tamb\xe9m definimos um 'findPropertyValueOccurrences'\nm\xe9todo auxiliar que usaremos posteriormente para coletar os dados desejados (n\xfamero de ocorr\xeancias de um\nvalor da propriedade e quais objetos cont\xeam esse valor) para nossos gr\xe1ficos."),(0,r.kt)("p",null,"Now let's import the JavaScript file to our application, and pass the extension ID to the viewer\nconstructor:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import './extensions/LoggerExtension.js';\nimport './extensions/SummaryExtension.js';\n// highlight-start\nimport './extensions/HistogramExtension.js';\n// highlight-end\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const config = {\n    extensions: [\n        'LoggerExtension',\n        'SummaryExtension',\n        // highlight-start\n        'HistogramExtension',\n        // highlight-end\n    ]\n};\nconst viewer = new Autodesk.Viewing.GuiViewer3D(container, config);\n")),(0,r.kt)("h2",{id:"barra-de-ferramentas"},"Barra de ferramentas"),(0,r.kt)("p",null,"Em seguida, vamos atualizar a classe 'HistogramExtension' para que ela adicione dois novos bot\xf5es ao visualizador\nbarra de ferramentas, uma para mostrar um gr\xe1fico de barras e outra para mostrar um gr\xe1fico de pizza:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/extensions/HistogramExtension.js"',title:'"wwwroot/extensions/HistogramExtension.js"'},"import { BaseExtension } from './BaseExtension.js';\nclass HistogramExtension extends BaseExtension {\n    constructor(viewer, options) {\n        super(viewer, options);\n        // highlight-start\n        this._barChartButton = null;\n        this._pieChartButton = null;\n        // highlight-end\n    }\n    async load() {\n        super.load();\n        console.log('HistogramExtension loaded.');\n        return true;\n    }\n    unload() {\n        super.unload();\n        // highlight-start\n        for (const button of [this._barChartButton, this._pieChartButton]) {\n            this.removeToolbarButton(button);\n        }\n        this._barChartButton = this._pieChartButton = null;\n        // highlight-end\n        console.log('HistogramExtension unloaded.');\n        return true;\n    }\n    // highlight-start\n    onToolbarCreated() {\n        this._barChartButton = this.createToolbarButton('dashboard-barchart-button', 'https://img.icons8.com/small/32/bar-chart.png', 'Show Property Histogram (Bar Chart)');\n        this._barChartButton.onClick = () => {\n            // TODO\n        };\n        this._pieChartButton = this.createToolbarButton('dashboard-piechart-button', 'https://img.icons8.com/small/32/pie-chart.png', 'Show Property Histogram (Pie Chart)');\n        this._pieChartButton.onClick = () => {\n            // TODO\n        };\n    }\n    // highlight-end\n    async findPropertyValueOccurrences(model, propertyName) {\n        const dbids = await this.findLeafNodes(model);\n        return new Promise(function (resolve, reject) {\n            model.getBulkProperties(dbids, { propFilter: [propertyName] }, function (results) {\n                let histogram = new Map();\n                for (const result of results) {\n                    if (result.properties.length > 0) {\n                        const key = result.properties[0].displayValue;\n                        if (histogram.has(key)) {\n                            histogram.get(key).push(result.dbId);\n                        } else {\n                            histogram.set(key, [result.dbId]);\n                        }\n                    }\n                }\n                resolve(histogram);\n            }, reject);\n        });\n    }\n}\nAutodesk.Viewing.theExtensionManager.registerExtension('HistogramExtension', HistogramExtension);\n")),(0,r.kt)("h2",{id:"carregamento-de-depend\xeancia"},"Carregamento de depend\xeancia"),(0,r.kt)("p",null,"Nossa extens\xe3o precisar\xe1 de alguma forma buscar as depend\xeancias da biblioteca Chart.js. Desde isso (obtendo depend\xeancias\nde uma biblioteca 3rd party) pode ser necess\xe1rio em outras extens\xf5es tamb\xe9m, vamos atualizar a classe 'BaseExtension' com\nmais alguns m\xe9todos auxiliares que lidar\xe3o com isso:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/extensions/BaseExtension.js"',title:'"wwwroot/extensions/BaseExtension.js"'},"export class BaseExtension extends Autodesk.Viewing.Extension {\n    constructor(viewer, options) {\n        super(viewer, options);\n        this._onObjectTreeCreated = (ev) => this.onModelLoaded(ev.model);\n        this._onSelectionChanged = (ev) => this.onSelectionChanged(ev.model, ev.dbIdArray);\n        this._onIsolationChanged = (ev) => this.onIsolationChanged(ev.model, ev.nodeIdArray);\n    }\n    load() {\n        this.viewer.addEventListener(Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT, this._onObjectTreeCreated);\n        this.viewer.addEventListener(Autodesk.Viewing.SELECTION_CHANGED_EVENT, this._onSelectionChanged);\n        this.viewer.addEventListener(Autodesk.Viewing.ISOLATE_EVENT, this._onIsolationChanged);\n        return true;\n    }\n    unload() {\n        this.viewer.removeEventListener(Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT, this._onObjectTreeCreated);\n        this.viewer.removeEventListener(Autodesk.Viewing.SELECTION_CHANGED_EVENT, this._onSelectionChanged);\n        this.viewer.removeEventListener(Autodesk.Viewing.ISOLATE_EVENT, this._onIsolationChanged);\n        return true;\n    }\n    onModelLoaded(model) {}\n    onSelectionChanged(model, dbids) {}\n    onIsolationChanged(model, dbids) {}\n    findLeafNodes(model) {\n        return new Promise(function (resolve, reject) {\n            model.getObjectTree(function (tree) {\n                let leaves = [];\n                tree.enumNodeChildren(tree.getRootId(), function (dbid) {\n                    if (tree.getChildCount(dbid) === 0) {\n                        leaves.push(dbid);\n                    }\n                }, true);\n                resolve(leaves);\n            }, reject);\n        });\n    }\n    async findPropertyNames(model) {\n        const dbids = await this.findLeafNodes(model);\n        return new Promise(function (resolve, reject) {\n            model.getBulkProperties(dbids, {}, function (results) {\n                let propNames = new Set();\n                for (const result of results) {\n                    for (const prop of result.properties) {\n                        propNames.add(prop.displayName);\n                    }\n                }\n                resolve(Array.from(propNames.values()));\n            }, reject);\n        });\n    }\n    createToolbarButton(buttonId, buttonIconUrl, buttonTooltip) {\n        let group = this.viewer.toolbar.getControl('dashboard-toolbar-group');\n        if (!group) {\n            group = new Autodesk.Viewing.UI.ControlGroup('dashboard-toolbar-group');\n            this.viewer.toolbar.addControl(group);\n        }\n        const button = new Autodesk.Viewing.UI.Button(buttonId);\n        button.setToolTip(buttonTooltip);\n        group.addControl(button);\n        const icon = button.container.querySelector('.adsk-button-icon');\n        if (icon) {\n            icon.style.backgroundImage = `url(${buttonIconUrl})`; \n            icon.style.backgroundSize = `24px`; \n            icon.style.backgroundRepeat = `no-repeat`; \n            icon.style.backgroundPosition = `center`; \n        }\n        return button;\n    }\n    removeToolbarButton(button) {\n        const group = this.viewer.toolbar.getControl('dashboard-toolbar-group');\n        group.removeControl(button);\n    }\n    // highlight-start\n    loadScript(url, namespace) {\n        if (window[namespace] !== undefined) {\n            return Promise.resolve();\n        }\n        return new Promise(function (resolve, reject) {\n            const el = document.createElement('script');\n            el.src = url;\n            el.onload = resolve;\n            el.onerror = reject;\n            document.head.appendChild(el);\n        });\n    }\n    // highlight-end\n    // highlight-start\n    loadStylesheet(url) {\n        return new Promise(function (resolve, reject) {\n            const el = document.createElement('link');\n            el.rel = 'stylesheet';\n            el.href = url;\n            el.onload = resolve;\n            el.onerror = reject;\n            document.head.appendChild(el);\n        });\n    }\n    // highlight-end\n}\n")),(0,r.kt)("h2",{id:"paradas"},"Paradas"),(0,r.kt)("p",null,"Agora vamos criar outro painel personalizado que hospedar\xe1 os gr\xe1ficos reais do gr\xe1fico. Criar um 'HistogramPanel.js'\nna mesma pasta onde 'HistogramExtension.js' est\xe1 localizado e adicione o seguinte c\xf3digo a ele:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/extensions/HistogramPanel.js"',title:'"wwwroot/extensions/HistogramPanel.js"'},"export class HistogramPanel extends Autodesk.Viewing.UI.DockingPanel {\n    constructor(extension, id, title, options) {\n        super(extension.viewer.container, id, title, options);\n        this.extension = extension;\n        this.container.style.left = (options.x || 0) + 'px';\n        this.container.style.top = (options.y || 0) + 'px';\n        this.container.style.width = (options.width || 500) + 'px';\n        this.container.style.height = (options.height || 400) + 'px';\n        this.container.style.resize = 'none';\n        this.chartType = options.chartType || 'bar'; // See https://www.chartjs.org/docs/latest for all the supported types of charts\n        this.chart = this.createChart();\n    }\n    initialize() {\n        this.title = this.createTitleBar(this.titleLabel || this.container.id);\n        this.initializeMoveHandlers(this.title);\n        this.container.appendChild(this.title);\n        this.content = document.createElement('div');\n        this.content.style.height = '350px';\n        this.content.style.backgroundColor = 'white';\n        this.content.innerHTML = `\n            <div class=\"props-container\" style=\"position: relative; height: 25px; padding: 0.5em;\">\n                <select class=\"props\"></select>\n            </div>\n            <div class=\"chart-container\" style=\"position: relative; height: 325px; padding: 0.5em;\">\n                <canvas class=\"chart\"></canvas>\n            </div>\n        `;\n        this.select = this.content.querySelector('select.props');\n        this.canvas = this.content.querySelector('canvas.chart');\n        this.container.appendChild(this.content);\n    }\n    createChart() {\n        return new Chart(this.canvas.getContext('2d'), {\n            type: this.chartType,\n            data: {\n                labels: [],\n                datasets: [{ data: [], backgroundColor: [], borderColor: [], borderWidth: 1 }],\n            },\n            options: { maintainAspectRatio: false }\n        });\n    }\n    async setModel(model) {\n        const propertyNames = await this.extension.findPropertyNames(model);\n        this.select.innerHTML = propertyNames.map(prop => `<option value=\"${prop}\">${prop}</option>`).join('\\n');\n        this.select.onchange = () => this.updateChart(model, this.select.value);\n        this.updateChart(model, this.select.value);\n    }\n    async updateChart(model, propName) {\n        const histogram = await this.extension.findPropertyValueOccurrences(model, propName);\n        const propertyValues = Array.from(histogram.keys());\n        this.chart.data.labels = propertyValues;\n        const dataset = this.chart.data.datasets[0];\n        dataset.label = propName;\n        dataset.data = propertyValues.map(val => histogram.get(val).length);\n        if (dataset.data.length > 0) {\n            const hslaColors = dataset.data.map((val, index) => `hsla(${Math.round(index * (360 / dataset.data.length))}, 100%, 50%, 0.2)`);\n            dataset.backgroundColor = dataset.borderColor = hslaColors;\n        }\n        this.chart.update();\n        this.chart.config.options.onClick = (ev, items) => {\n            if (items.length === 1) {\n                const index = items[0].index;\n                const dbids = histogram.get(propertyValues[index]);\n                this.extension.viewer.isolate(dbids);\n                this.extension.viewer.fitToView(dbids);\n            }\n        };\n    }\n}\n")),(0,r.kt)("p",null,"E, finalmente, vamos usar a nova classe de painel em nossa extens\xe3o:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/extensions/HistogramExtension.js"',title:'"wwwroot/extensions/HistogramExtension.js"'},"import { BaseExtension } from './BaseExtension.js';\n// highlight-start\nimport { HistogramPanel } from './HistogramPanel.js';\n// highlight-end\nclass HistogramExtension extends BaseExtension {\n    constructor(viewer, options) {\n        super(viewer, options);\n        this._barChartButton = null;\n        this._pieChartButton = null;\n        // highlight-start\n        this._barChartPanel = null;\n        this._pieChartPanel = null;\n        // highlight-end\n    }\n    async load() {\n        super.load();\n        // highlight-start\n        await this.loadScript('https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.5.1/chart.min.js', 'Chart');\n        Chart.defaults.plugins.legend.display = false;\n        // highlight-end\n        console.log('HistogramExtension loaded.');\n        return true;\n    }\n    unload() {\n        super.unload();\n        for (const button of [this._barChartButton, this._pieChartButton]) {\n            this.removeToolbarButton(button);\n        }\n        this._barChartButton = this._pieChartButton = null;\n        // highlight-start\n        for (const panel of [this._barChartPanel, this._pieChartPanel]) {\n            panel.setVisible(false);\n            panel.uninitialize();\n        }\n        this._barChartPanel = this._pieChartPanel = null;\n        // highlight-end\n        console.log('HistogramExtension unloaded.');\n        return true;\n    }\n    onToolbarCreated() {\n        // highlight-start\n        this._barChartPanel = new HistogramPanel(this, 'dashboard-barchart-panel', 'Property Histogram', { x: 10, y: 10, chartType: 'bar' });\n        this._pieChartPanel = new HistogramPanel(this, 'dashboard-piechart-panel', 'Property Histogram', { x: 10, y: 420, chartType: 'doughnut' });\n        // highlight-end\n        this._barChartButton = this.createToolbarButton('dashboard-barchart-button', 'https://img.icons8.com/small/32/bar-chart.png', 'Show Property Histogram (Bar Chart)');\n        this._barChartButton.onClick = () => {\n            // highlight-start\n            this._barChartPanel.setVisible(!this._barChartPanel.isVisible());\n            this._barChartButton.setState(this._barChartPanel.isVisible() ? Autodesk.Viewing.UI.Button.State.ACTIVE : Autodesk.Viewing.UI.Button.State.INACTIVE);\n            if (this._barChartPanel.isVisible() && this.viewer.model) {\n                this._barChartPanel.setModel(this.viewer.model);\n            }\n            // highlight-end\n        };\n        this._pieChartButton = this.createToolbarButton('dashboard-piechart-button', 'https://img.icons8.com/small/32/pie-chart.png', 'Show Property Histogram (Pie Chart)');\n        this._pieChartButton.onClick = () => {\n            // highlight-start\n            this._pieChartPanel.setVisible(!this._pieChartPanel.isVisible());\n            this._pieChartButton.setState(this._pieChartPanel.isVisible() ? Autodesk.Viewing.UI.Button.State.ACTIVE : Autodesk.Viewing.UI.Button.State.INACTIVE);\n            if (this._pieChartPanel.isVisible() && this.viewer.model) {\n                this._pieChartPanel.setModel(this.viewer.model);\n            }\n            // highlight-end\n        };\n    }\n    // highlight-start\n    onModelLoaded(model) {\n        super.onModelLoaded(model);\n        if (this._barChartPanel && this._barChartPanel.isVisible()) {\n            this._barChartPanel.setModel(model);\n        }\n        if (this._pieChartPanel && this._pieChartPanel.isVisible()) {\n            this._pieChartPanel.setModel(model);\n        }\n    }\n    // highlight-end\n    async findPropertyValueOccurrences(model, propertyName) {\n        const dbids = await this.findLeafNodes(model);\n        return new Promise(function (resolve, reject) {\n            model.getBulkProperties(dbids, { propFilter: [propertyName] }, function (results) {\n                let histogram = new Map();\n                for (const result of results) {\n                    if (result.properties.length > 0) {\n                        const key = result.properties[0].displayValue;\n                        if (histogram.has(key)) {\n                            histogram.get(key).push(result.dbId);\n                        } else {\n                            histogram.set(key, [result.dbId]);\n                        }\n                    }\n                }\n                resolve(histogram);\n            }, reject);\n        });\n    }\n}\nAutodesk.Viewing.theExtensionManager.registerExtension('HistogramExtension', HistogramExtension);\n")),(0,r.kt)("h2",{id:"experimente"},"Experimente"),(0,r.kt)("p",null,"Tudo bem, hora de testar nossa extens\xe3o de gr\xe1ficos no visualizador. Clique em qualquer uma das novas barras de ferramentas\nBot\xf5es. Um novo painel deve aparecer com um gr\xe1fico de barras ou um gr\xe1fico de pizza mostrando o histograma\nde valores diferentes que aparecem para uma propriedade espec\xedfica (que voc\xea pode selecionar na lista suspensa).\nE clicar em qualquer barra ou segmento de pizza isolar\xe1 todos os elementos de design correspondentes\nno espectador."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Histogram Result",src:n(8980).Z,width:"3510",height:"2024"})))}u.isMDXComponent=!0},8980:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/histogram-charts-final-app-0408f16c5faf96ff63530a43064787d1.webp"}}]);