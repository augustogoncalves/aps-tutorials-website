"use strict";(self.webpackChunkaps_tutorials_website=self.webpackChunkaps_tutorials_website||[]).push([[651],{4137:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>c});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},s=Object.keys(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)t=s[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=o.createContext({}),l=function(e){var n=o.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=l(e.components);return o.createElement(d.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,d=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(t),c=a,g=p["".concat(d,".").concat(c)]||p[c]||m[c]||s;return t?o.createElement(g,r(r({ref:n},u),{},{components:t})):o.createElement(g,r({ref:n},u))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,r=new Array(s);r[0]=p;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=e,i.mdxType="string"==typeof e?e:a,r[1]=i;for(var l=2;l<s;l++)r[l]=t[l];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1832:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var o=t(7462),a=(t(7294),t(4137));const s={},r="Resumo do Modelo",i={unversionedId:"tutorials/dashboard/panel",id:"tutorials/dashboard/panel",title:"Resumo do Modelo",description:"Nesta etapa, criaremos outra extens\xe3o de visualizador, desta vez introduzindo elementos de interface do usu\xe1rio personalizados",source:"@site/i18n/pt/docusaurus-plugin-content-docs/current/03-tutorials/03-dashboard/02-panel.mdx",sourceDirName:"03-tutorials/03-dashboard",slug:"/tutorials/dashboard/panel",permalink:"/pt/tutorials/dashboard/panel",draft:!1,editUrl:"https://github.com/autodesk-platform-services/aps-tutorials-website/edit/master/docs/03-tutorials/03-dashboard/02-panel.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"basic",permalink:"/pt/tutorials/dashboard/basic"},next:{title:"Gr\xe1ficos de Histograma",permalink:"/pt/tutorials/dashboard/charts"}},d={},l=[{value:"Esqueleto de extens\xe3o",id:"esqueleto-de-extens\xe3o",level:2},{value:"Bot\xe3o da barra de ferramentas",id:"bot\xe3o-da-barra-de-ferramentas",level:2},{value:"Painel personalizado",id:"painel-personalizado",level:2},{value:"Experimente",id:"experimente",level:2}],u={toc:l};function m(e){let{components:n,...s}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,s,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"resumo-do-modelo"},"Resumo do Modelo"),(0,a.kt)("p",null,"Nesta etapa, criaremos outra extens\xe3o de visualizador, desta vez introduzindo elementos de interface do usu\xe1rio personalizados\ntamb\xe9m. Vamos adicionar um bot\xe3o personalizado para a barra de ferramentas do visualizador, e quando o bot\xe3o \xe9 clicado,\nExibimos um painel de encaixe com o resumo dos valores de propriedade em diferentes elementos de design."),(0,a.kt)("h2",{id:"esqueleto-de-extens\xe3o"},"Esqueleto de extens\xe3o"),(0,a.kt)("p",null,"Assim como com a extens\xe3o anterior, crie um novo arquivo na subpasta 'extensions',\nchame-o de 'SummaryExtension.js' e preencha-o com o seguinte c\xf3digo:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/extensions/SummaryExtension.js"',title:'"wwwroot/extensions/SummaryExtension.js"'},"import { BaseExtension } from './BaseExtension.js';\nclass SummaryExtension extends BaseExtension {\n    constructor(viewer, options) {\n        super(viewer, options);\n    }\n    load() {\n        super.load();\n        console.log('SummaryExtension loaded.');\n        return true;\n    }\n    unload() {\n        super.unload();\n        console.log('SummaryExtension unloaded.');\n        return true;\n    }\n    onModelLoaded(model) {\n        super.onModelLoaded(model);\n        this.update();\n    }\n    onSelectionChanged(model, dbids) {\n        super.onSelectionChanged(model, dbids);\n        this.update();\n    }\n    onIsolationChanged(model, dbids) {\n        super.onIsolationChanged(model, dbids);\n        this.update();\n    }\n    async update() {\n        // TODO\n    }\n}\nAutodesk.Viewing.theExtensionManager.registerExtension('SummaryExtension', SummaryExtension);\n")),(0,a.kt)("p",null,"Next, in ",(0,a.kt)("inlineCode",{parentName:"p"},"wwwroot/viewer.js"),", import the extension code to our application, and pass the extension ID\nto the viewer constructor:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import './extensions/LoggerExtension.js';\n// highlight-start\nimport './extensions/SummaryExtension.js';\n// highlight-end\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const config = {\n    extensions: [\n        'LoggerExtension',\n        // highlight-start\n        'SummaryExtension',\n        // highlight-end\n    ]\n};\nconst viewer = new Autodesk.Viewing.GuiViewer3D(container, config);\n")),(0,a.kt)("h2",{id:"bot\xe3o-da-barra-de-ferramentas"},"Bot\xe3o da barra de ferramentas"),(0,a.kt)("p",null,"Agora vamos criar um novo bot\xe3o na barra de ferramentas do visualizador. J\xe1 que outras extens\xf5es precisar\xe3o\nesta funcionalidade tamb\xe9m, vamos atualizar nossa classe 'BaseExtension' (no arquivo 'BaseExtension.js')\ncom os seguintes m\xe9todos auxiliares:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/extensions/BaseExtension.js"',title:'"wwwroot/extensions/BaseExtension.js"'},"export class BaseExtension extends Autodesk.Viewing.Extension {\n    constructor(viewer, options) {\n        super(viewer, options);\n        this._onObjectTreeCreated = (ev) => this.onModelLoaded(ev.model);\n        this._onSelectionChanged = (ev) => this.onSelectionChanged(ev.model, ev.dbIdArray);\n        this._onIsolationChanged = (ev) => this.onIsolationChanged(ev.model, ev.nodeIdArray);\n    }\n    load() {\n        this.viewer.addEventListener(Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT, this._onObjectTreeCreated);\n        this.viewer.addEventListener(Autodesk.Viewing.SELECTION_CHANGED_EVENT, this._onSelectionChanged);\n        this.viewer.addEventListener(Autodesk.Viewing.ISOLATE_EVENT, this._onIsolationChanged);\n        return true;\n    }\n    unload() {\n        this.viewer.removeEventListener(Autodesk.Viewing.OBJECT_TREE_CREATED_EVENT, this._onObjectTreeCreated);\n        this.viewer.removeEventListener(Autodesk.Viewing.SELECTION_CHANGED_EVENT, this._onSelectionChanged);\n        this.viewer.removeEventListener(Autodesk.Viewing.ISOLATE_EVENT, this._onIsolationChanged);\n        return true;\n    }\n    onToolbarCreated() {}\n    onModelLoaded(model) {}\n    onSelectionChanged(model, dbids) {}\n    onIsolationChanged(model, dbids) {}\n    findLeafNodes(model) {\n        return new Promise(function (resolve, reject) {\n            model.getObjectTree(function (tree) {\n                let leaves = [];\n                tree.enumNodeChildren(tree.getRootId(), function (dbid) {\n                    if (tree.getChildCount(dbid) === 0) {\n                        leaves.push(dbid);\n                    }\n                }, true);\n                resolve(leaves);\n            }, reject);\n        });\n    }\n    async findPropertyNames(model) {\n        const dbids = await this.findLeafNodes(model);\n        return new Promise(function (resolve, reject) {\n            model.getBulkProperties(dbids, {}, function (results) {\n                let propNames = new Set();\n                for (const result of results) {\n                    for (const prop of result.properties) {\n                        propNames.add(prop.displayName);\n                    }\n                }\n                resolve(Array.from(propNames.values()));\n            }, reject);\n        });\n    }\n    // highlight-start\n    createToolbarButton(buttonId, buttonIconUrl, buttonTooltip) {\n        let group = this.viewer.toolbar.getControl('dashboard-toolbar-group');\n        if (!group) {\n            group = new Autodesk.Viewing.UI.ControlGroup('dashboard-toolbar-group');\n            this.viewer.toolbar.addControl(group);\n        }\n        const button = new Autodesk.Viewing.UI.Button(buttonId);\n        button.setToolTip(buttonTooltip);\n        group.addControl(button);\n        const icon = button.container.querySelector('.adsk-button-icon');\n        if (icon) {\n            icon.style.backgroundImage = `url(${buttonIconUrl})`; \n            icon.style.backgroundSize = `24px`; \n            icon.style.backgroundRepeat = `no-repeat`; \n            icon.style.backgroundPosition = `center`; \n        }\n        return button;\n    }\n    // highlight-end\n    // highlight-start\n    removeToolbarButton(button) {\n        const group = this.viewer.toolbar.getControl('dashboard-toolbar-group');\n        group.removeControl(button);\n    }\n    // highlight-end\n}\n")),(0,a.kt)("p",null,"O novo c\xf3digo est\xe1 usando classes do namespace 'Autodesk.Viewing.UI' para criar\num novo grupo de bot\xf5es da barra de ferramentas e um novo bot\xe3o da barra de ferramentas com ID espec\xedfico, URL do \xedcone,\ne mensagem de dica de ferramenta."),(0,a.kt)("p",null,"Agora vamos usar esses m\xe9todos auxiliares na classe 'SummaryExtension':"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/extensions/SummaryExtension.js"',title:'"wwwroot/extensions/SummaryExtension.js"'},"import { BaseExtension } from './BaseExtension.js';\nclass SummaryExtension extends BaseExtension {\n    constructor(viewer, options) {\n        super(viewer, options);\n        // highlight-start\n        this._button = null;\n        // highlight-end\n    }\n    load() {\n        super.load();\n        console.log('SummaryExtension loaded.');\n        return true;\n    }\n    unload() {\n        super.unload();\n        // highlight-start\n        if (this._button) {\n            this.removeToolbarButton(this._button);\n            this._button = null;\n        }\n        // highlight-end\n        console.log('SummaryExtension unloaded.');\n        return true;\n    }\n    onToolbarCreated() {\n        // highlight-start\n        this._button = this.createToolbarButton('summary-button', 'https://img.icons8.com/small/32/brief.png', 'Show Model Summary');\n        this._button.onClick = () => {\n            // TODO\n        };\n        // highlight-end\n    }\n    onModelLoaded(model) {\n        super.onModelLoaded(model);\n        this.update();\n    }\n    onSelectionChanged(model, dbids) {\n        super.onSelectionChanged(model, dbids);\n        this.update();\n    }\n    onIsolationChanged(model, dbids) {\n        super.onIsolationChanged(model, dbids);\n        this.update();\n    }\n    async update() {\n        // TODO\n    }\n}\nAutodesk.Viewing.theExtensionManager.registerExtension('SummaryExtension', SummaryExtension);\n")),(0,a.kt)("p",null,"O m\xe9todo 'onToolbarCreated' ser\xe1 chamado automaticamente pelo visualizador quando (e se)\nA barra de ferramentas est\xe1 pronta. Observe que o visualizador pode ser ativado em um modo \"sem cabe\xe7a\",\nnesse caso, nenhuma interface do usu\xe1rio ser\xe1 criada e o m\xe9todo 'onToolbarCreated' n\xe3o ser\xe1 chamado."),(0,a.kt)("h2",{id:"painel-personalizado"},"Painel personalizado"),(0,a.kt)("p",null,"E, finalmente, atualizamos a extens\xe3o 'SummaryExtension' para que quando o usu\xe1rio clicar em\no bot\xe3o da barra de ferramentas, exibimos um painel visualizador personalizado com dados agregados de properites\ndo projeto atualmente carregado."),(0,a.kt)("p",null,"Comece criando um arquivo 'SummaryPanel.js' na mesma pasta onde 'SummaryExtension.js'\nest\xe1 localizado e adicione o seguinte c\xf3digo a ele:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/extensions/SummaryPanel.js"',title:'"wwwroot/extensions/SummaryPanel.js"'},"export class SummaryPanel extends Autodesk.Viewing.UI.PropertyPanel {\n    constructor(extension, id, title) {\n        super(extension.viewer.container, id, title);\n        this.extension = extension;\n    }\n    async update(model, dbids, propNames) {\n        this.removeAllProperties();\n        for (const propName of propNames) {\n            const initialValue = { sum: 0, count: 0, min: Infinity, max: -Infinity };\n            const aggregateFunc = (aggregate, value, property) => {\n                return {\n                    count: aggregate.count + 1,\n                    sum: aggregate.sum + value,\n                    min: Math.min(aggregate.min, value),\n                    max: Math.max(aggregate.max, value),\n                    units: property.units,\n                    precision: property.precision\n                };\n            };\n            const { sum, count, min, max, units, precision } = await this.aggregatePropertyValues(model, dbids, propName, aggregateFunc, initialValue);\n            if (count > 0) {\n                const category = propName;\n                this.addProperty('Count', count, category);\n                this.addProperty('Sum', this.toDisplayUnits(sum, units, precision), category);\n                this.addProperty('Avg', this.toDisplayUnits((sum / count), units, precision), category);\n                this.addProperty('Min', this.toDisplayUnits(min, units, precision), category);\n                this.addProperty('Max', this.toDisplayUnits(max, units, precision), category);\n            }\n        }\n    }\n    async aggregatePropertyValues(model, dbids, propertyName, aggregateFunc, initialValue = 0) {\n        return new Promise(function (resolve, reject) {\n            let aggregatedValue = initialValue;\n            model.getBulkProperties(dbids, { propFilter: [propertyName] }, function (results) {\n                for (const result of results) {\n                    if (result.properties.length > 0) {\n                        const prop = result.properties[0];\n                        aggregatedValue = aggregateFunc(aggregatedValue, prop.displayValue, prop);\n                    }\n                }\n                resolve(aggregatedValue);\n            }, reject);\n        });\n    }\n    toDisplayUnits(value, units, precision) {\n        return Autodesk.Viewing.Private.formatValueWithUnits(value, units, 3, precision);\n    }\n}\n")),(0,a.kt)("p",null,"A nova classe \xe9 derivada de ",(0,a.kt)("a",{parentName:"p",href:"https://aps.autodesk.com/en/docs/viewer/v7/reference/UI/PropertyPanel/"},"Autodesk.Viewing.UI.PropertyPanel"),"\nque \xe9 a interface do usu\xe1rio do painel padr\xe3o usada para exibir propriedades de elementos de design selecionados.\nNeste caso, usamos os m\xe9todos 'removeAllProperties' e 'addProperty' para exibir diferentes\ntipo de dados. Dado um conjunto espec\xedfico de IDs de objeto e nomes de propriedade, o 'SummaryPanel'\nExibir valores agregados (contagem, soma, m\xe9dia, m\xednimo e m\xe1ximo) dessas propriedades\nem todos os objetos."),(0,a.kt)("p",null,"Finalmente, vamos adicionar o painel \xe0 nossa extens\xe3o:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="wwwroot/extensions/SummaryExtension.js"',title:'"wwwroot/extensions/SummaryExtension.js"'},"import { BaseExtension } from './BaseExtension.js';\n// highlight-start\nimport { SummaryPanel } from './SummaryPanel.js';\n// highlight-end\n// highlight-start\nconst SUMMARY_PROPS = ['Length', 'Area', 'Volume', 'Density', 'Mass', 'Price'];\n// highlight-end\nclass SummaryExtension extends BaseExtension {\n    constructor(viewer, options) {\n        super(viewer, options);\n        this._button = null;\n        // highlight-start\n        this._panel = null;\n        // highlight-end\n    }\n    load() {\n        super.load();\n        console.log('SummaryExtension loaded.');\n        return true;\n    }\n    unload() {\n        super.unload();\n        if (this._button) {\n            this.removeToolbarButton(this._button);\n            this._button = null;\n        }\n        // highlight-start\n        if (this._panel) {\n            this._panel.setVisible(false);\n            this._panel.uninitialize();\n            this._panel = null;\n        }\n        // highlight-end\n        console.log('SummaryExtension unloaded.');\n        return true;\n    }\n    onToolbarCreated() {\n        // highlight-start\n        this._panel = new SummaryPanel(this, 'model-summary-panel', 'Model Summary');\n        // highlight-end\n        this._button = this.createToolbarButton('summary-button', 'https://img.icons8.com/small/32/brief.png', 'Show Model Summary');\n        this._button.onClick = () => {\n            // highlight-start\n            this._panel.setVisible(!this._panel.isVisible());\n            this._button.setState(this._panel.isVisible() ? Autodesk.Viewing.UI.Button.State.ACTIVE : Autodesk.Viewing.UI.Button.State.INACTIVE);\n            if (this._panel.isVisible()) {\n                this.update();\n            }\n            // highlight-end\n        };\n    }\n    onModelLoaded(model) {\n        super.onModelLoaded(model);\n        this.update();\n    }\n    onSelectionChanged(model, dbids) {\n        super.onSelectionChanged(model, dbids);\n        this.update();\n    }\n    onIsolationChanged(model, dbids) {\n        super.onIsolationChanged(model, dbids);\n        this.update();\n    }\n    async update() {\n        // highlight-start\n        if (this._panel) {\n            const selectedIds = this.viewer.getSelection();\n            const isolatedIds = this.viewer.getIsolatedNodes();\n            if (selectedIds.length > 0) { // If any nodes are selected, compute the aggregates for them\n                this._panel.update(this.viewer.model, selectedIds, SUMMARY_PROPS);\n            } else if (isolatedIds.length > 0) { // Or, if any nodes are isolated, compute the aggregates for those\n                this._panel.update(this.viewer.model, isolatedIds, SUMMARY_PROPS);\n            } else { // Otherwise compute the aggregates for all nodes\n                const dbids = await this.findLeafNodes(this.viewer.model);\n                this._panel.update(this.viewer.model, dbids, SUMMARY_PROPS);\n            }\n        }\n        // highlight-end\n    }\n}\nAutodesk.Viewing.theExtensionManager.registerExtension('SummaryExtension', SummaryExtension);\n")),(0,a.kt)("h2",{id:"experimente"},"Experimente"),(0,a.kt)("p",null,"Desta vez, podemos testar nossa nova extens\xe3o diretamente no visualizador. Tente clicar na nova barra de ferramentas\npara abrir nosso painel de resumo. O painel mostra v\xe1rios agregados de propriedades\ncodificamos a constante 'SUMMARY",(0,a.kt)("em",{parentName:"p"},"PROPS' (_Length"),", ",(0,a.kt)("em",{parentName:"p"},"Area"),", ",(0,a.kt)("em",{parentName:"p"},"Volume"),", ",(0,a.kt)("em",{parentName:"p"},"Density"),",\n",(0,a.kt)("em",{parentName:"p"},"Mass"),", e ",(0,a.kt)("em",{parentName:"p"},"Price"),") para todos os objetos. E quando isolamos ou selecionamos parte do design\nelementos \xe0 m\xe3o, os valores agregados tamb\xe9m devem refletir isso."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Aggregates Result",src:t(9562).Z,width:"3496",height:"1920"})))}m.isMDXComponent=!0},9562:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/model-summary-final-app-d48d65fec273f57ae1fef48bc013f093.webp"}}]);